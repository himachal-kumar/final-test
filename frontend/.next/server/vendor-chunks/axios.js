"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/axios";
exports.ids = ["vendor-chunks/axios"];
exports.modules = {

/***/ "(rsc)/../node_modules/axios/dist/node/axios.cjs":
/*!*************************************************!*\
  !*** ../node_modules/axios/dist/node/axios.cjs ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*! Axios v1.11.0 Copyright (c) 2025 Matt Zabriskie and contributors */ \nconst FormData$1 = __webpack_require__(/*! form-data */ \"(rsc)/../node_modules/form-data/lib/form_data.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst proxyFromEnv = __webpack_require__(/*! proxy-from-env */ \"(rsc)/../node_modules/proxy-from-env/index.js\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst followRedirects = __webpack_require__(/*! follow-redirects */ \"(rsc)/../node_modules/follow-redirects/index.js\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst events = __webpack_require__(/*! events */ \"events\");\nfunction _interopDefaultLegacy(e) {\n    return e && typeof e === \"object\" && \"default\" in e ? e : {\n        \"default\": e\n    };\n}\nconst FormData__default = /*#__PURE__*/ _interopDefaultLegacy(FormData$1);\nconst crypto__default = /*#__PURE__*/ _interopDefaultLegacy(crypto);\nconst url__default = /*#__PURE__*/ _interopDefaultLegacy(url);\nconst proxyFromEnv__default = /*#__PURE__*/ _interopDefaultLegacy(proxyFromEnv);\nconst http__default = /*#__PURE__*/ _interopDefaultLegacy(http);\nconst https__default = /*#__PURE__*/ _interopDefaultLegacy(https);\nconst util__default = /*#__PURE__*/ _interopDefaultLegacy(util);\nconst followRedirects__default = /*#__PURE__*/ _interopDefaultLegacy(followRedirects);\nconst zlib__default = /*#__PURE__*/ _interopDefaultLegacy(zlib);\nconst stream__default = /*#__PURE__*/ _interopDefaultLegacy(stream);\nfunction bind(fn, thisArg) {\n    return function wrap() {\n        return fn.apply(thisArg, arguments);\n    };\n}\n// utils is a library of generic helper functions non-specific to axios\nconst { toString } = Object.prototype;\nconst { getPrototypeOf } = Object;\nconst { iterator, toStringTag } = Symbol;\nconst kindOf = ((cache)=>(thing)=>{\n        const str = toString.call(thing);\n        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n    })(Object.create(null));\nconst kindOfTest = (type)=>{\n    type = type.toLowerCase();\n    return (thing)=>kindOf(thing) === type;\n};\nconst typeOfTest = (type)=>(thing)=>typeof thing === type;\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */ const { isArray } = Array;\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */ const isUndefined = typeOfTest(\"undefined\");\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */ function isBuffer(val) {\n    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */ const isArrayBuffer = kindOfTest(\"ArrayBuffer\");\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */ function isArrayBufferView(val) {\n    let result;\n    if (typeof ArrayBuffer !== \"undefined\" && ArrayBuffer.isView) {\n        result = ArrayBuffer.isView(val);\n    } else {\n        result = val && val.buffer && isArrayBuffer(val.buffer);\n    }\n    return result;\n}\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */ const isString = typeOfTest(\"string\");\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */ const isFunction = typeOfTest(\"function\");\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */ const isNumber = typeOfTest(\"number\");\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */ const isObject = (thing)=>thing !== null && typeof thing === \"object\";\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */ const isBoolean = (thing)=>thing === true || thing === false;\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */ const isPlainObject = (val)=>{\n    if (kindOf(val) !== \"object\") {\n        return false;\n    }\n    const prototype = getPrototypeOf(val);\n    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(toStringTag in val) && !(iterator in val);\n};\n/**\n * Determine if a value is an empty object (safely handles Buffers)\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an empty object, otherwise false\n */ const isEmptyObject = (val)=>{\n    // Early return for non-objects or Buffers to prevent RangeError\n    if (!isObject(val) || isBuffer(val)) {\n        return false;\n    }\n    try {\n        return Object.keys(val).length === 0 && Object.getPrototypeOf(val) === Object.prototype;\n    } catch (e) {\n        // Fallback for any other objects that might cause RangeError with Object.keys()\n        return false;\n    }\n};\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */ const isDate = kindOfTest(\"Date\");\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */ const isFile = kindOfTest(\"File\");\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */ const isBlob = kindOfTest(\"Blob\");\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */ const isFileList = kindOfTest(\"FileList\");\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */ const isStream = (val)=>isObject(val) && isFunction(val.pipe);\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */ const isFormData = (thing)=>{\n    let kind;\n    return thing && (typeof FormData === \"function\" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === \"formdata\" || // detect form-data instance\n    kind === \"object\" && isFunction(thing.toString) && thing.toString() === \"[object FormData]\"));\n};\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */ const isURLSearchParams = kindOfTest(\"URLSearchParams\");\nconst [isReadableStream, isRequest, isResponse, isHeaders] = [\n    \"ReadableStream\",\n    \"Request\",\n    \"Response\",\n    \"Headers\"\n].map(kindOfTest);\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */ const trim = (str)=>str.trim ? str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */ function forEach(obj, fn, { allOwnKeys = false } = {}) {\n    // Don't bother if no value provided\n    if (obj === null || typeof obj === \"undefined\") {\n        return;\n    }\n    let i;\n    let l;\n    // Force an array if not already something iterable\n    if (typeof obj !== \"object\") {\n        /*eslint no-param-reassign:0*/ obj = [\n            obj\n        ];\n    }\n    if (isArray(obj)) {\n        // Iterate over array values\n        for(i = 0, l = obj.length; i < l; i++){\n            fn.call(null, obj[i], i, obj);\n        }\n    } else {\n        // Buffer check\n        if (isBuffer(obj)) {\n            return;\n        }\n        // Iterate over object keys\n        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n        const len = keys.length;\n        let key;\n        for(i = 0; i < len; i++){\n            key = keys[i];\n            fn.call(null, obj[key], key, obj);\n        }\n    }\n}\nfunction findKey(obj, key) {\n    if (isBuffer(obj)) {\n        return null;\n    }\n    key = key.toLowerCase();\n    const keys = Object.keys(obj);\n    let i = keys.length;\n    let _key;\n    while(i-- > 0){\n        _key = keys[i];\n        if (key === _key.toLowerCase()) {\n            return _key;\n        }\n    }\n    return null;\n}\nconst _global = (()=>{\n    /*eslint no-undef:0*/ if (typeof globalThis !== \"undefined\") return globalThis;\n    return typeof self !== \"undefined\" ? self :  false ? 0 : global;\n})();\nconst isContextDefined = (context)=>!isUndefined(context) && context !== _global;\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */ function merge() {\n    const { caseless } = isContextDefined(this) && this || {};\n    const result = {};\n    const assignValue = (val, key)=>{\n        const targetKey = caseless && findKey(result, key) || key;\n        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n            result[targetKey] = merge(result[targetKey], val);\n        } else if (isPlainObject(val)) {\n            result[targetKey] = merge({}, val);\n        } else if (isArray(val)) {\n            result[targetKey] = val.slice();\n        } else {\n            result[targetKey] = val;\n        }\n    };\n    for(let i = 0, l = arguments.length; i < l; i++){\n        arguments[i] && forEach(arguments[i], assignValue);\n    }\n    return result;\n}\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */ const extend = (a, b, thisArg, { allOwnKeys } = {})=>{\n    forEach(b, (val, key)=>{\n        if (thisArg && isFunction(val)) {\n            a[key] = bind(val, thisArg);\n        } else {\n            a[key] = val;\n        }\n    }, {\n        allOwnKeys\n    });\n    return a;\n};\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */ const stripBOM = (content)=>{\n    if (content.charCodeAt(0) === 0xFEFF) {\n        content = content.slice(1);\n    }\n    return content;\n};\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */ const inherits = (constructor, superConstructor, props, descriptors)=>{\n    constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n    constructor.prototype.constructor = constructor;\n    Object.defineProperty(constructor, \"super\", {\n        value: superConstructor.prototype\n    });\n    props && Object.assign(constructor.prototype, props);\n};\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */ const toFlatObject = (sourceObj, destObj, filter, propFilter)=>{\n    let props;\n    let i;\n    let prop;\n    const merged = {};\n    destObj = destObj || {};\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    if (sourceObj == null) return destObj;\n    do {\n        props = Object.getOwnPropertyNames(sourceObj);\n        i = props.length;\n        while(i-- > 0){\n            prop = props[i];\n            if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n                destObj[prop] = sourceObj[prop];\n                merged[prop] = true;\n            }\n        }\n        sourceObj = filter !== false && getPrototypeOf(sourceObj);\n    }while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n    return destObj;\n};\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */ const endsWith = (str, searchString, position)=>{\n    str = String(str);\n    if (position === undefined || position > str.length) {\n        position = str.length;\n    }\n    position -= searchString.length;\n    const lastIndex = str.indexOf(searchString, position);\n    return lastIndex !== -1 && lastIndex === position;\n};\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */ const toArray = (thing)=>{\n    if (!thing) return null;\n    if (isArray(thing)) return thing;\n    let i = thing.length;\n    if (!isNumber(i)) return null;\n    const arr = new Array(i);\n    while(i-- > 0){\n        arr[i] = thing[i];\n    }\n    return arr;\n};\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */ // eslint-disable-next-line func-names\nconst isTypedArray = ((TypedArray)=>{\n    // eslint-disable-next-line func-names\n    return (thing)=>{\n        return TypedArray && thing instanceof TypedArray;\n    };\n})(typeof Uint8Array !== \"undefined\" && getPrototypeOf(Uint8Array));\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */ const forEachEntry = (obj, fn)=>{\n    const generator = obj && obj[iterator];\n    const _iterator = generator.call(obj);\n    let result;\n    while((result = _iterator.next()) && !result.done){\n        const pair = result.value;\n        fn.call(obj, pair[0], pair[1]);\n    }\n};\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */ const matchAll = (regExp, str)=>{\n    let matches;\n    const arr = [];\n    while((matches = regExp.exec(str)) !== null){\n        arr.push(matches);\n    }\n    return arr;\n};\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */ const isHTMLForm = kindOfTest(\"HTMLFormElement\");\nconst toCamelCase = (str)=>{\n    return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g, function replacer(m, p1, p2) {\n        return p1.toUpperCase() + p2;\n    });\n};\n/* Creating a function that will check if an object has a property. */ const hasOwnProperty = (({ hasOwnProperty })=>(obj, prop)=>hasOwnProperty.call(obj, prop))(Object.prototype);\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */ const isRegExp = kindOfTest(\"RegExp\");\nconst reduceDescriptors = (obj, reducer)=>{\n    const descriptors = Object.getOwnPropertyDescriptors(obj);\n    const reducedDescriptors = {};\n    forEach(descriptors, (descriptor, name)=>{\n        let ret;\n        if ((ret = reducer(descriptor, name, obj)) !== false) {\n            reducedDescriptors[name] = ret || descriptor;\n        }\n    });\n    Object.defineProperties(obj, reducedDescriptors);\n};\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */ const freezeMethods = (obj)=>{\n    reduceDescriptors(obj, (descriptor, name)=>{\n        // skip restricted props in strict mode\n        if (isFunction(obj) && [\n            \"arguments\",\n            \"caller\",\n            \"callee\"\n        ].indexOf(name) !== -1) {\n            return false;\n        }\n        const value = obj[name];\n        if (!isFunction(value)) return;\n        descriptor.enumerable = false;\n        if (\"writable\" in descriptor) {\n            descriptor.writable = false;\n            return;\n        }\n        if (!descriptor.set) {\n            descriptor.set = ()=>{\n                throw Error(\"Can not rewrite read-only method '\" + name + \"'\");\n            };\n        }\n    });\n};\nconst toObjectSet = (arrayOrString, delimiter)=>{\n    const obj = {};\n    const define = (arr)=>{\n        arr.forEach((value)=>{\n            obj[value] = true;\n        });\n    };\n    isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n    return obj;\n};\nconst noop = ()=>{};\nconst toFiniteNumber = (value, defaultValue)=>{\n    return value != null && Number.isFinite(value = +value) ? value : defaultValue;\n};\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */ function isSpecCompliantForm(thing) {\n    return !!(thing && isFunction(thing.append) && thing[toStringTag] === \"FormData\" && thing[iterator]);\n}\nconst toJSONObject = (obj)=>{\n    const stack = new Array(10);\n    const visit = (source, i)=>{\n        if (isObject(source)) {\n            if (stack.indexOf(source) >= 0) {\n                return;\n            }\n            //Buffer check\n            if (isBuffer(source)) {\n                return source;\n            }\n            if (!(\"toJSON\" in source)) {\n                stack[i] = source;\n                const target = isArray(source) ? [] : {};\n                forEach(source, (value, key)=>{\n                    const reducedValue = visit(value, i + 1);\n                    !isUndefined(reducedValue) && (target[key] = reducedValue);\n                });\n                stack[i] = undefined;\n                return target;\n            }\n        }\n        return source;\n    };\n    return visit(obj, 0);\n};\nconst isAsyncFn = kindOfTest(\"AsyncFunction\");\nconst isThenable = (thing)=>thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n// original code\n// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34\nconst _setImmediate = ((setImmediateSupported, postMessageSupported)=>{\n    if (setImmediateSupported) {\n        return setImmediate;\n    }\n    return postMessageSupported ? ((token, callbacks)=>{\n        _global.addEventListener(\"message\", ({ source, data })=>{\n            if (source === _global && data === token) {\n                callbacks.length && callbacks.shift()();\n            }\n        }, false);\n        return (cb)=>{\n            callbacks.push(cb);\n            _global.postMessage(token, \"*\");\n        };\n    })(`axios@${Math.random()}`, []) : (cb)=>setTimeout(cb);\n})(typeof setImmediate === \"function\", isFunction(_global.postMessage));\nconst asap = typeof queueMicrotask !== \"undefined\" ? queueMicrotask.bind(_global) : typeof process !== \"undefined\" && process.nextTick || _setImmediate;\n// *********************\nconst isIterable = (thing)=>thing != null && isFunction(thing[iterator]);\nconst utils$1 = {\n    isArray,\n    isArrayBuffer,\n    isBuffer,\n    isFormData,\n    isArrayBufferView,\n    isString,\n    isNumber,\n    isBoolean,\n    isObject,\n    isPlainObject,\n    isEmptyObject,\n    isReadableStream,\n    isRequest,\n    isResponse,\n    isHeaders,\n    isUndefined,\n    isDate,\n    isFile,\n    isBlob,\n    isRegExp,\n    isFunction,\n    isStream,\n    isURLSearchParams,\n    isTypedArray,\n    isFileList,\n    forEach,\n    merge,\n    extend,\n    trim,\n    stripBOM,\n    inherits,\n    toFlatObject,\n    kindOf,\n    kindOfTest,\n    endsWith,\n    toArray,\n    forEachEntry,\n    matchAll,\n    isHTMLForm,\n    hasOwnProperty,\n    hasOwnProp: hasOwnProperty,\n    reduceDescriptors,\n    freezeMethods,\n    toObjectSet,\n    toCamelCase,\n    noop,\n    toFiniteNumber,\n    findKey,\n    global: _global,\n    isContextDefined,\n    isSpecCompliantForm,\n    toJSONObject,\n    isAsyncFn,\n    isThenable,\n    setImmediate: _setImmediate,\n    asap,\n    isIterable\n};\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */ function AxiosError(message, code, config, request, response) {\n    Error.call(this);\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor);\n    } else {\n        this.stack = new Error().stack;\n    }\n    this.message = message;\n    this.name = \"AxiosError\";\n    code && (this.code = code);\n    config && (this.config = config);\n    request && (this.request = request);\n    if (response) {\n        this.response = response;\n        this.status = response.status ? response.status : null;\n    }\n}\nutils$1.inherits(AxiosError, Error, {\n    toJSON: function toJSON() {\n        return {\n            // Standard\n            message: this.message,\n            name: this.name,\n            // Microsoft\n            description: this.description,\n            number: this.number,\n            // Mozilla\n            fileName: this.fileName,\n            lineNumber: this.lineNumber,\n            columnNumber: this.columnNumber,\n            stack: this.stack,\n            // Axios\n            config: utils$1.toJSONObject(this.config),\n            code: this.code,\n            status: this.status\n        };\n    }\n});\nconst prototype$1 = AxiosError.prototype;\nconst descriptors = {};\n[\n    \"ERR_BAD_OPTION_VALUE\",\n    \"ERR_BAD_OPTION\",\n    \"ECONNABORTED\",\n    \"ETIMEDOUT\",\n    \"ERR_NETWORK\",\n    \"ERR_FR_TOO_MANY_REDIRECTS\",\n    \"ERR_DEPRECATED\",\n    \"ERR_BAD_RESPONSE\",\n    \"ERR_BAD_REQUEST\",\n    \"ERR_CANCELED\",\n    \"ERR_NOT_SUPPORT\",\n    \"ERR_INVALID_URL\"\n].forEach((code)=>{\n    descriptors[code] = {\n        value: code\n    };\n});\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype$1, \"isAxiosError\", {\n    value: true\n});\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps)=>{\n    const axiosError = Object.create(prototype$1);\n    utils$1.toFlatObject(error, axiosError, function filter(obj) {\n        return obj !== Error.prototype;\n    }, (prop)=>{\n        return prop !== \"isAxiosError\";\n    });\n    AxiosError.call(axiosError, error.message, code, config, request, response);\n    axiosError.cause = error;\n    axiosError.name = error.name;\n    customProps && Object.assign(axiosError, customProps);\n    return axiosError;\n};\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */ function isVisitable(thing) {\n    return utils$1.isPlainObject(thing) || utils$1.isArray(thing);\n}\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */ function removeBrackets(key) {\n    return utils$1.endsWith(key, \"[]\") ? key.slice(0, -2) : key;\n}\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */ function renderKey(path, key, dots) {\n    if (!path) return key;\n    return path.concat(key).map(function each(token, i) {\n        // eslint-disable-next-line no-param-reassign\n        token = removeBrackets(token);\n        return !dots && i ? \"[\" + token + \"]\" : token;\n    }).join(dots ? \".\" : \"\");\n}\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */ function isFlatArray(arr) {\n    return utils$1.isArray(arr) && !arr.some(isVisitable);\n}\nconst predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {\n    return /^is[A-Z]/.test(prop);\n});\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/ /**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */ function toFormData(obj, formData, options) {\n    if (!utils$1.isObject(obj)) {\n        throw new TypeError(\"target must be an object\");\n    }\n    // eslint-disable-next-line no-param-reassign\n    formData = formData || new (FormData__default[\"default\"] || FormData)();\n    // eslint-disable-next-line no-param-reassign\n    options = utils$1.toFlatObject(options, {\n        metaTokens: true,\n        dots: false,\n        indexes: false\n    }, false, function defined(option, source) {\n        // eslint-disable-next-line no-eq-null,eqeqeq\n        return !utils$1.isUndefined(source[option]);\n    });\n    const metaTokens = options.metaTokens;\n    // eslint-disable-next-line no-use-before-define\n    const visitor = options.visitor || defaultVisitor;\n    const dots = options.dots;\n    const indexes = options.indexes;\n    const _Blob = options.Blob || typeof Blob !== \"undefined\" && Blob;\n    const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);\n    if (!utils$1.isFunction(visitor)) {\n        throw new TypeError(\"visitor must be a function\");\n    }\n    function convertValue(value) {\n        if (value === null) return \"\";\n        if (utils$1.isDate(value)) {\n            return value.toISOString();\n        }\n        if (utils$1.isBoolean(value)) {\n            return value.toString();\n        }\n        if (!useBlob && utils$1.isBlob(value)) {\n            throw new AxiosError(\"Blob is not supported. Use a Buffer instead.\");\n        }\n        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {\n            return useBlob && typeof Blob === \"function\" ? new Blob([\n                value\n            ]) : Buffer.from(value);\n        }\n        return value;\n    }\n    /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */ function defaultVisitor(value, key, path) {\n        let arr = value;\n        if (value && !path && typeof value === \"object\") {\n            if (utils$1.endsWith(key, \"{}\")) {\n                // eslint-disable-next-line no-param-reassign\n                key = metaTokens ? key : key.slice(0, -2);\n                // eslint-disable-next-line no-param-reassign\n                value = JSON.stringify(value);\n            } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, \"[]\")) && (arr = utils$1.toArray(value))) {\n                // eslint-disable-next-line no-param-reassign\n                key = removeBrackets(key);\n                arr.forEach(function each(el, index) {\n                    !(utils$1.isUndefined(el) || el === null) && formData.append(// eslint-disable-next-line no-nested-ternary\n                    indexes === true ? renderKey([\n                        key\n                    ], index, dots) : indexes === null ? key : key + \"[]\", convertValue(el));\n                });\n                return false;\n            }\n        }\n        if (isVisitable(value)) {\n            return true;\n        }\n        formData.append(renderKey(path, key, dots), convertValue(value));\n        return false;\n    }\n    const stack = [];\n    const exposedHelpers = Object.assign(predicates, {\n        defaultVisitor,\n        convertValue,\n        isVisitable\n    });\n    function build(value, path) {\n        if (utils$1.isUndefined(value)) return;\n        if (stack.indexOf(value) !== -1) {\n            throw Error(\"Circular reference detected in \" + path.join(\".\"));\n        }\n        stack.push(value);\n        utils$1.forEach(value, function each(el, key) {\n            const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(formData, el, utils$1.isString(key) ? key.trim() : key, path, exposedHelpers);\n            if (result === true) {\n                build(el, path ? path.concat(key) : [\n                    key\n                ]);\n            }\n        });\n        stack.pop();\n    }\n    if (!utils$1.isObject(obj)) {\n        throw new TypeError(\"data must be an object\");\n    }\n    build(obj);\n    return formData;\n}\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */ function encode$1(str) {\n    const charMap = {\n        \"!\": \"%21\",\n        \"'\": \"%27\",\n        \"(\": \"%28\",\n        \")\": \"%29\",\n        \"~\": \"%7E\",\n        \"%20\": \"+\",\n        \"%00\": \"\\x00\"\n    };\n    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n        return charMap[match];\n    });\n}\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */ function AxiosURLSearchParams(params, options) {\n    this._pairs = [];\n    params && toFormData(params, this, options);\n}\nconst prototype = AxiosURLSearchParams.prototype;\nprototype.append = function append(name, value) {\n    this._pairs.push([\n        name,\n        value\n    ]);\n};\nprototype.toString = function toString(encoder) {\n    const _encode = encoder ? function(value) {\n        return encoder.call(this, value, encode$1);\n    } : encode$1;\n    return this._pairs.map(function each(pair) {\n        return _encode(pair[0]) + \"=\" + _encode(pair[1]);\n    }, \"\").join(\"&\");\n};\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */ function encode(val) {\n    return encodeURIComponent(val).replace(/%3A/gi, \":\").replace(/%24/g, \"$\").replace(/%2C/gi, \",\").replace(/%20/g, \"+\").replace(/%5B/gi, \"[\").replace(/%5D/gi, \"]\");\n}\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?(object|Function)} options\n *\n * @returns {string} The formatted url\n */ function buildURL(url, params, options) {\n    /*eslint no-param-reassign:0*/ if (!params) {\n        return url;\n    }\n    const _encode = options && options.encode || encode;\n    if (utils$1.isFunction(options)) {\n        options = {\n            serialize: options\n        };\n    }\n    const serializeFn = options && options.serialize;\n    let serializedParams;\n    if (serializeFn) {\n        serializedParams = serializeFn(params, options);\n    } else {\n        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);\n    }\n    if (serializedParams) {\n        const hashmarkIndex = url.indexOf(\"#\");\n        if (hashmarkIndex !== -1) {\n            url = url.slice(0, hashmarkIndex);\n        }\n        url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + serializedParams;\n    }\n    return url;\n}\nclass InterceptorManager {\n    constructor(){\n        this.handlers = [];\n    }\n    /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */ use(fulfilled, rejected, options) {\n        this.handlers.push({\n            fulfilled,\n            rejected,\n            synchronous: options ? options.synchronous : false,\n            runWhen: options ? options.runWhen : null\n        });\n        return this.handlers.length - 1;\n    }\n    /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */ eject(id) {\n        if (this.handlers[id]) {\n            this.handlers[id] = null;\n        }\n    }\n    /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */ clear() {\n        if (this.handlers) {\n            this.handlers = [];\n        }\n    }\n    /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */ forEach(fn) {\n        utils$1.forEach(this.handlers, function forEachHandler(h) {\n            if (h !== null) {\n                fn(h);\n            }\n        });\n    }\n}\nconst InterceptorManager$1 = InterceptorManager;\nconst transitionalDefaults = {\n    silentJSONParsing: true,\n    forcedJSONParsing: true,\n    clarifyTimeoutError: false\n};\nconst URLSearchParams = url__default[\"default\"].URLSearchParams;\nconst ALPHA = \"abcdefghijklmnopqrstuvwxyz\";\nconst DIGIT = \"0123456789\";\nconst ALPHABET = {\n    DIGIT,\n    ALPHA,\n    ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n};\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT)=>{\n    let str = \"\";\n    const { length } = alphabet;\n    const randomValues = new Uint32Array(size);\n    crypto__default[\"default\"].randomFillSync(randomValues);\n    for(let i = 0; i < size; i++){\n        str += alphabet[randomValues[i] % length];\n    }\n    return str;\n};\nconst platform$1 = {\n    isNode: true,\n    classes: {\n        URLSearchParams,\n        FormData: FormData__default[\"default\"],\n        Blob: typeof Blob !== \"undefined\" && Blob || null\n    },\n    ALPHABET,\n    generateString,\n    protocols: [\n        \"http\",\n        \"https\",\n        \"file\",\n        \"data\"\n    ]\n};\nconst hasBrowserEnv =  false && 0;\nconst _navigator = typeof navigator === \"object\" && navigator || undefined;\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */ const hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || [\n    \"ReactNative\",\n    \"NativeScript\",\n    \"NS\"\n].indexOf(_navigator.product) < 0);\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */ const hasStandardBrowserWebWorkerEnv = (()=>{\n    return typeof WorkerGlobalScope !== \"undefined\" && // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope && typeof self.importScripts === \"function\";\n})();\nconst origin = hasBrowserEnv && window.location.href || \"http://localhost\";\nconst utils = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    hasBrowserEnv: hasBrowserEnv,\n    hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,\n    hasStandardBrowserEnv: hasStandardBrowserEnv,\n    navigator: _navigator,\n    origin: origin\n});\nconst platform = {\n    ...utils,\n    ...platform$1\n};\nfunction toURLEncodedForm(data, options) {\n    return toFormData(data, new platform.classes.URLSearchParams(), {\n        visitor: function(value, key, path, helpers) {\n            if (platform.isNode && utils$1.isBuffer(value)) {\n                this.append(key, value.toString(\"base64\"));\n                return false;\n            }\n            return helpers.defaultVisitor.apply(this, arguments);\n        },\n        ...options\n    });\n}\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */ function parsePropPath(name) {\n    // foo[x][y][z]\n    // foo.x.y.z\n    // foo-x-y-z\n    // foo x y z\n    return utils$1.matchAll(/\\w+|\\[(\\w*)]/g, name).map((match)=>{\n        return match[0] === \"[]\" ? \"\" : match[1] || match[0];\n    });\n}\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */ function arrayToObject(arr) {\n    const obj = {};\n    const keys = Object.keys(arr);\n    let i;\n    const len = keys.length;\n    let key;\n    for(i = 0; i < len; i++){\n        key = keys[i];\n        obj[key] = arr[key];\n    }\n    return obj;\n}\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */ function formDataToJSON(formData) {\n    function buildPath(path, value, target, index) {\n        let name = path[index++];\n        if (name === \"__proto__\") return true;\n        const isNumericKey = Number.isFinite(+name);\n        const isLast = index >= path.length;\n        name = !name && utils$1.isArray(target) ? target.length : name;\n        if (isLast) {\n            if (utils$1.hasOwnProp(target, name)) {\n                target[name] = [\n                    target[name],\n                    value\n                ];\n            } else {\n                target[name] = value;\n            }\n            return !isNumericKey;\n        }\n        if (!target[name] || !utils$1.isObject(target[name])) {\n            target[name] = [];\n        }\n        const result = buildPath(path, value, target[name], index);\n        if (result && utils$1.isArray(target[name])) {\n            target[name] = arrayToObject(target[name]);\n        }\n        return !isNumericKey;\n    }\n    if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {\n        const obj = {};\n        utils$1.forEachEntry(formData, (name, value)=>{\n            buildPath(parsePropPath(name), value, obj, 0);\n        });\n        return obj;\n    }\n    return null;\n}\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */ function stringifySafely(rawValue, parser, encoder) {\n    if (utils$1.isString(rawValue)) {\n        try {\n            (parser || JSON.parse)(rawValue);\n            return utils$1.trim(rawValue);\n        } catch (e) {\n            if (e.name !== \"SyntaxError\") {\n                throw e;\n            }\n        }\n    }\n    return (encoder || JSON.stringify)(rawValue);\n}\nconst defaults = {\n    transitional: transitionalDefaults,\n    adapter: [\n        \"xhr\",\n        \"http\",\n        \"fetch\"\n    ],\n    transformRequest: [\n        function transformRequest(data, headers) {\n            const contentType = headers.getContentType() || \"\";\n            const hasJSONContentType = contentType.indexOf(\"application/json\") > -1;\n            const isObjectPayload = utils$1.isObject(data);\n            if (isObjectPayload && utils$1.isHTMLForm(data)) {\n                data = new FormData(data);\n            }\n            const isFormData = utils$1.isFormData(data);\n            if (isFormData) {\n                return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n            }\n            if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {\n                return data;\n            }\n            if (utils$1.isArrayBufferView(data)) {\n                return data.buffer;\n            }\n            if (utils$1.isURLSearchParams(data)) {\n                headers.setContentType(\"application/x-www-form-urlencoded;charset=utf-8\", false);\n                return data.toString();\n            }\n            let isFileList;\n            if (isObjectPayload) {\n                if (contentType.indexOf(\"application/x-www-form-urlencoded\") > -1) {\n                    return toURLEncodedForm(data, this.formSerializer).toString();\n                }\n                if ((isFileList = utils$1.isFileList(data)) || contentType.indexOf(\"multipart/form-data\") > -1) {\n                    const _FormData = this.env && this.env.FormData;\n                    return toFormData(isFileList ? {\n                        \"files[]\": data\n                    } : data, _FormData && new _FormData(), this.formSerializer);\n                }\n            }\n            if (isObjectPayload || hasJSONContentType) {\n                headers.setContentType(\"application/json\", false);\n                return stringifySafely(data);\n            }\n            return data;\n        }\n    ],\n    transformResponse: [\n        function transformResponse(data) {\n            const transitional = this.transitional || defaults.transitional;\n            const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n            const JSONRequested = this.responseType === \"json\";\n            if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {\n                return data;\n            }\n            if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {\n                const silentJSONParsing = transitional && transitional.silentJSONParsing;\n                const strictJSONParsing = !silentJSONParsing && JSONRequested;\n                try {\n                    return JSON.parse(data);\n                } catch (e) {\n                    if (strictJSONParsing) {\n                        if (e.name === \"SyntaxError\") {\n                            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n                        }\n                        throw e;\n                    }\n                }\n            }\n            return data;\n        }\n    ],\n    /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */ timeout: 0,\n    xsrfCookieName: \"XSRF-TOKEN\",\n    xsrfHeaderName: \"X-XSRF-TOKEN\",\n    maxContentLength: -1,\n    maxBodyLength: -1,\n    env: {\n        FormData: platform.classes.FormData,\n        Blob: platform.classes.Blob\n    },\n    validateStatus: function validateStatus(status) {\n        return status >= 200 && status < 300;\n    },\n    headers: {\n        common: {\n            \"Accept\": \"application/json, text/plain, */*\",\n            \"Content-Type\": undefined\n        }\n    }\n};\nutils$1.forEach([\n    \"delete\",\n    \"get\",\n    \"head\",\n    \"post\",\n    \"put\",\n    \"patch\"\n], (method)=>{\n    defaults.headers[method] = {};\n});\nconst defaults$1 = defaults;\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils$1.toObjectSet([\n    \"age\",\n    \"authorization\",\n    \"content-length\",\n    \"content-type\",\n    \"etag\",\n    \"expires\",\n    \"from\",\n    \"host\",\n    \"if-modified-since\",\n    \"if-unmodified-since\",\n    \"last-modified\",\n    \"location\",\n    \"max-forwards\",\n    \"proxy-authorization\",\n    \"referer\",\n    \"retry-after\",\n    \"user-agent\"\n]);\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */ const parseHeaders = (rawHeaders)=>{\n    const parsed = {};\n    let key;\n    let val;\n    let i;\n    rawHeaders && rawHeaders.split(\"\\n\").forEach(function parser(line) {\n        i = line.indexOf(\":\");\n        key = line.substring(0, i).trim().toLowerCase();\n        val = line.substring(i + 1).trim();\n        if (!key || parsed[key] && ignoreDuplicateOf[key]) {\n            return;\n        }\n        if (key === \"set-cookie\") {\n            if (parsed[key]) {\n                parsed[key].push(val);\n            } else {\n                parsed[key] = [\n                    val\n                ];\n            }\n        } else {\n            parsed[key] = parsed[key] ? parsed[key] + \", \" + val : val;\n        }\n    });\n    return parsed;\n};\nconst $internals = Symbol(\"internals\");\nfunction normalizeHeader(header) {\n    return header && String(header).trim().toLowerCase();\n}\nfunction normalizeValue(value) {\n    if (value === false || value == null) {\n        return value;\n    }\n    return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);\n}\nfunction parseTokens(str) {\n    const tokens = Object.create(null);\n    const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n    let match;\n    while(match = tokensRE.exec(str)){\n        tokens[match[1]] = match[2];\n    }\n    return tokens;\n}\nconst isValidHeaderName = (str)=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n    if (utils$1.isFunction(filter)) {\n        return filter.call(this, value, header);\n    }\n    if (isHeaderNameFilter) {\n        value = header;\n    }\n    if (!utils$1.isString(value)) return;\n    if (utils$1.isString(filter)) {\n        return value.indexOf(filter) !== -1;\n    }\n    if (utils$1.isRegExp(filter)) {\n        return filter.test(value);\n    }\n}\nfunction formatHeader(header) {\n    return header.trim().toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str)=>{\n        return char.toUpperCase() + str;\n    });\n}\nfunction buildAccessors(obj, header) {\n    const accessorName = utils$1.toCamelCase(\" \" + header);\n    [\n        \"get\",\n        \"set\",\n        \"has\"\n    ].forEach((methodName)=>{\n        Object.defineProperty(obj, methodName + accessorName, {\n            value: function(arg1, arg2, arg3) {\n                return this[methodName].call(this, header, arg1, arg2, arg3);\n            },\n            configurable: true\n        });\n    });\n}\nclass AxiosHeaders {\n    constructor(headers){\n        headers && this.set(headers);\n    }\n    set(header, valueOrRewrite, rewrite) {\n        const self1 = this;\n        function setHeader(_value, _header, _rewrite) {\n            const lHeader = normalizeHeader(_header);\n            if (!lHeader) {\n                throw new Error(\"header name must be a non-empty string\");\n            }\n            const key = utils$1.findKey(self1, lHeader);\n            if (!key || self1[key] === undefined || _rewrite === true || _rewrite === undefined && self1[key] !== false) {\n                self1[key || _header] = normalizeValue(_value);\n            }\n        }\n        const setHeaders = (headers, _rewrite)=>utils$1.forEach(headers, (_value, _header)=>setHeader(_value, _header, _rewrite));\n        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {\n            setHeaders(header, valueOrRewrite);\n        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n            setHeaders(parseHeaders(header), valueOrRewrite);\n        } else if (utils$1.isObject(header) && utils$1.isIterable(header)) {\n            let obj = {}, dest, key;\n            for (const entry of header){\n                if (!utils$1.isArray(entry)) {\n                    throw TypeError(\"Object iterator must return a key-value pair\");\n                }\n                obj[key = entry[0]] = (dest = obj[key]) ? utils$1.isArray(dest) ? [\n                    ...dest,\n                    entry[1]\n                ] : [\n                    dest,\n                    entry[1]\n                ] : entry[1];\n            }\n            setHeaders(obj, valueOrRewrite);\n        } else {\n            header != null && setHeader(valueOrRewrite, header, rewrite);\n        }\n        return this;\n    }\n    get(header, parser) {\n        header = normalizeHeader(header);\n        if (header) {\n            const key = utils$1.findKey(this, header);\n            if (key) {\n                const value = this[key];\n                if (!parser) {\n                    return value;\n                }\n                if (parser === true) {\n                    return parseTokens(value);\n                }\n                if (utils$1.isFunction(parser)) {\n                    return parser.call(this, value, key);\n                }\n                if (utils$1.isRegExp(parser)) {\n                    return parser.exec(value);\n                }\n                throw new TypeError(\"parser must be boolean|regexp|function\");\n            }\n        }\n    }\n    has(header, matcher) {\n        header = normalizeHeader(header);\n        if (header) {\n            const key = utils$1.findKey(this, header);\n            return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n        }\n        return false;\n    }\n    delete(header, matcher) {\n        const self1 = this;\n        let deleted = false;\n        function deleteHeader(_header) {\n            _header = normalizeHeader(_header);\n            if (_header) {\n                const key = utils$1.findKey(self1, _header);\n                if (key && (!matcher || matchHeaderValue(self1, self1[key], key, matcher))) {\n                    delete self1[key];\n                    deleted = true;\n                }\n            }\n        }\n        if (utils$1.isArray(header)) {\n            header.forEach(deleteHeader);\n        } else {\n            deleteHeader(header);\n        }\n        return deleted;\n    }\n    clear(matcher) {\n        const keys = Object.keys(this);\n        let i = keys.length;\n        let deleted = false;\n        while(i--){\n            const key = keys[i];\n            if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n                delete this[key];\n                deleted = true;\n            }\n        }\n        return deleted;\n    }\n    normalize(format) {\n        const self1 = this;\n        const headers = {};\n        utils$1.forEach(this, (value, header)=>{\n            const key = utils$1.findKey(headers, header);\n            if (key) {\n                self1[key] = normalizeValue(value);\n                delete self1[header];\n                return;\n            }\n            const normalized = format ? formatHeader(header) : String(header).trim();\n            if (normalized !== header) {\n                delete self1[header];\n            }\n            self1[normalized] = normalizeValue(value);\n            headers[normalized] = true;\n        });\n        return this;\n    }\n    concat(...targets) {\n        return this.constructor.concat(this, ...targets);\n    }\n    toJSON(asStrings) {\n        const obj = Object.create(null);\n        utils$1.forEach(this, (value, header)=>{\n            value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(\", \") : value);\n        });\n        return obj;\n    }\n    [Symbol.iterator]() {\n        return Object.entries(this.toJSON())[Symbol.iterator]();\n    }\n    toString() {\n        return Object.entries(this.toJSON()).map(([header, value])=>header + \": \" + value).join(\"\\n\");\n    }\n    getSetCookie() {\n        return this.get(\"set-cookie\") || [];\n    }\n    get [Symbol.toStringTag]() {\n        return \"AxiosHeaders\";\n    }\n    static from(thing) {\n        return thing instanceof this ? thing : new this(thing);\n    }\n    static concat(first, ...targets) {\n        const computed = new this(first);\n        targets.forEach((target)=>computed.set(target));\n        return computed;\n    }\n    static accessor(header) {\n        const internals = this[$internals] = this[$internals] = {\n            accessors: {}\n        };\n        const accessors = internals.accessors;\n        const prototype = this.prototype;\n        function defineAccessor(_header) {\n            const lHeader = normalizeHeader(_header);\n            if (!accessors[lHeader]) {\n                buildAccessors(prototype, _header);\n                accessors[lHeader] = true;\n            }\n        }\n        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n        return this;\n    }\n}\nAxiosHeaders.accessor([\n    \"Content-Type\",\n    \"Content-Length\",\n    \"Accept\",\n    \"Accept-Encoding\",\n    \"User-Agent\",\n    \"Authorization\"\n]);\n// reserved names hotfix\nutils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key)=>{\n    let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n    return {\n        get: ()=>value,\n        set (headerValue) {\n            this[mapped] = headerValue;\n        }\n    };\n});\nutils$1.freezeMethods(AxiosHeaders);\nconst AxiosHeaders$1 = AxiosHeaders;\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */ function transformData(fns, response) {\n    const config = this || defaults$1;\n    const context = response || config;\n    const headers = AxiosHeaders$1.from(context.headers);\n    let data = context.data;\n    utils$1.forEach(fns, function transform(fn) {\n        data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n    });\n    headers.normalize();\n    return data;\n}\nfunction isCancel(value) {\n    return !!(value && value.__CANCEL__);\n}\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */ function CanceledError(message, config, request) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    AxiosError.call(this, message == null ? \"canceled\" : message, AxiosError.ERR_CANCELED, config, request);\n    this.name = \"CanceledError\";\n}\nutils$1.inherits(CanceledError, AxiosError, {\n    __CANCEL__: true\n});\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */ function settle(resolve, reject, response) {\n    const validateStatus = response.config.validateStatus;\n    if (!response.status || !validateStatus || validateStatus(response.status)) {\n        resolve(response);\n    } else {\n        reject(new AxiosError(\"Request failed with status code \" + response.status, [\n            AxiosError.ERR_BAD_REQUEST,\n            AxiosError.ERR_BAD_RESPONSE\n        ][Math.floor(response.status / 100) - 4], response.config, response.request, response));\n    }\n}\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */ function isAbsoluteURL(url) {\n    // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n    // by any combination of letters, digits, plus, period, or hyphen.\n    return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */ function combineURLs(baseURL, relativeURL) {\n    return relativeURL ? baseURL.replace(/\\/?\\/$/, \"\") + \"/\" + relativeURL.replace(/^\\/+/, \"\") : baseURL;\n}\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */ function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {\n    let isRelativeUrl = !isAbsoluteURL(requestedURL);\n    if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {\n        return combineURLs(baseURL, requestedURL);\n    }\n    return requestedURL;\n}\nconst VERSION = \"1.11.0\";\nfunction parseProtocol(url) {\n    const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n    return match && match[1] || \"\";\n}\nconst DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\\s\\S]*)$/;\n/**\n * Parse data uri to a Buffer or Blob\n *\n * @param {String} uri\n * @param {?Boolean} asBlob\n * @param {?Object} options\n * @param {?Function} options.Blob\n *\n * @returns {Buffer|Blob}\n */ function fromDataURI(uri, asBlob, options) {\n    const _Blob = options && options.Blob || platform.classes.Blob;\n    const protocol = parseProtocol(uri);\n    if (asBlob === undefined && _Blob) {\n        asBlob = true;\n    }\n    if (protocol === \"data\") {\n        uri = protocol.length ? uri.slice(protocol.length + 1) : uri;\n        const match = DATA_URL_PATTERN.exec(uri);\n        if (!match) {\n            throw new AxiosError(\"Invalid URL\", AxiosError.ERR_INVALID_URL);\n        }\n        const mime = match[1];\n        const isBase64 = match[2];\n        const body = match[3];\n        const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? \"base64\" : \"utf8\");\n        if (asBlob) {\n            if (!_Blob) {\n                throw new AxiosError(\"Blob is not supported\", AxiosError.ERR_NOT_SUPPORT);\n            }\n            return new _Blob([\n                buffer\n            ], {\n                type: mime\n            });\n        }\n        return buffer;\n    }\n    throw new AxiosError(\"Unsupported protocol \" + protocol, AxiosError.ERR_NOT_SUPPORT);\n}\nconst kInternals = Symbol(\"internals\");\nclass AxiosTransformStream extends stream__default[\"default\"].Transform {\n    constructor(options){\n        options = utils$1.toFlatObject(options, {\n            maxRate: 0,\n            chunkSize: 64 * 1024,\n            minChunkSize: 100,\n            timeWindow: 500,\n            ticksRate: 2,\n            samplesCount: 15\n        }, null, (prop, source)=>{\n            return !utils$1.isUndefined(source[prop]);\n        });\n        super({\n            readableHighWaterMark: options.chunkSize\n        });\n        const internals = this[kInternals] = {\n            timeWindow: options.timeWindow,\n            chunkSize: options.chunkSize,\n            maxRate: options.maxRate,\n            minChunkSize: options.minChunkSize,\n            bytesSeen: 0,\n            isCaptured: false,\n            notifiedBytesLoaded: 0,\n            ts: Date.now(),\n            bytes: 0,\n            onReadCallback: null\n        };\n        this.on(\"newListener\", (event)=>{\n            if (event === \"progress\") {\n                if (!internals.isCaptured) {\n                    internals.isCaptured = true;\n                }\n            }\n        });\n    }\n    _read(size) {\n        const internals = this[kInternals];\n        if (internals.onReadCallback) {\n            internals.onReadCallback();\n        }\n        return super._read(size);\n    }\n    _transform(chunk, encoding, callback) {\n        const internals = this[kInternals];\n        const maxRate = internals.maxRate;\n        const readableHighWaterMark = this.readableHighWaterMark;\n        const timeWindow = internals.timeWindow;\n        const divider = 1000 / timeWindow;\n        const bytesThreshold = maxRate / divider;\n        const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;\n        const pushChunk = (_chunk, _callback)=>{\n            const bytes = Buffer.byteLength(_chunk);\n            internals.bytesSeen += bytes;\n            internals.bytes += bytes;\n            internals.isCaptured && this.emit(\"progress\", internals.bytesSeen);\n            if (this.push(_chunk)) {\n                process.nextTick(_callback);\n            } else {\n                internals.onReadCallback = ()=>{\n                    internals.onReadCallback = null;\n                    process.nextTick(_callback);\n                };\n            }\n        };\n        const transformChunk = (_chunk, _callback)=>{\n            const chunkSize = Buffer.byteLength(_chunk);\n            let chunkRemainder = null;\n            let maxChunkSize = readableHighWaterMark;\n            let bytesLeft;\n            let passed = 0;\n            if (maxRate) {\n                const now = Date.now();\n                if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {\n                    internals.ts = now;\n                    bytesLeft = bytesThreshold - internals.bytes;\n                    internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;\n                    passed = 0;\n                }\n                bytesLeft = bytesThreshold - internals.bytes;\n            }\n            if (maxRate) {\n                if (bytesLeft <= 0) {\n                    // next time window\n                    return setTimeout(()=>{\n                        _callback(null, _chunk);\n                    }, timeWindow - passed);\n                }\n                if (bytesLeft < maxChunkSize) {\n                    maxChunkSize = bytesLeft;\n                }\n            }\n            if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {\n                chunkRemainder = _chunk.subarray(maxChunkSize);\n                _chunk = _chunk.subarray(0, maxChunkSize);\n            }\n            pushChunk(_chunk, chunkRemainder ? ()=>{\n                process.nextTick(_callback, null, chunkRemainder);\n            } : _callback);\n        };\n        transformChunk(chunk, function transformNextChunk(err, _chunk) {\n            if (err) {\n                return callback(err);\n            }\n            if (_chunk) {\n                transformChunk(_chunk, transformNextChunk);\n            } else {\n                callback(null);\n            }\n        });\n    }\n}\nconst AxiosTransformStream$1 = AxiosTransformStream;\nconst { asyncIterator } = Symbol;\nconst readBlob = async function*(blob) {\n    if (blob.stream) {\n        yield* blob.stream();\n    } else if (blob.arrayBuffer) {\n        yield await blob.arrayBuffer();\n    } else if (blob[asyncIterator]) {\n        yield* blob[asyncIterator]();\n    } else {\n        yield blob;\n    }\n};\nconst readBlob$1 = readBlob;\nconst BOUNDARY_ALPHABET = platform.ALPHABET.ALPHA_DIGIT + \"-_\";\nconst textEncoder = typeof TextEncoder === \"function\" ? new TextEncoder() : new util__default[\"default\"].TextEncoder();\nconst CRLF = \"\\r\\n\";\nconst CRLF_BYTES = textEncoder.encode(CRLF);\nconst CRLF_BYTES_COUNT = 2;\nclass FormDataPart {\n    constructor(name, value){\n        const { escapeName } = this.constructor;\n        const isStringValue = utils$1.isString(value);\n        let headers = `Content-Disposition: form-data; name=\"${escapeName(name)}\"${!isStringValue && value.name ? `; filename=\"${escapeName(value.name)}\"` : \"\"}${CRLF}`;\n        if (isStringValue) {\n            value = textEncoder.encode(String(value).replace(/\\r?\\n|\\r\\n?/g, CRLF));\n        } else {\n            headers += `Content-Type: ${value.type || \"application/octet-stream\"}${CRLF}`;\n        }\n        this.headers = textEncoder.encode(headers + CRLF);\n        this.contentLength = isStringValue ? value.byteLength : value.size;\n        this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;\n        this.name = name;\n        this.value = value;\n    }\n    async *encode() {\n        yield this.headers;\n        const { value } = this;\n        if (utils$1.isTypedArray(value)) {\n            yield value;\n        } else {\n            yield* readBlob$1(value);\n        }\n        yield CRLF_BYTES;\n    }\n    static escapeName(name) {\n        return String(name).replace(/[\\r\\n\"]/g, (match)=>({\n                \"\\r\": \"%0D\",\n                \"\\n\": \"%0A\",\n                '\"': \"%22\"\n            })[match]);\n    }\n}\nconst formDataToStream = (form, headersHandler, options)=>{\n    const { tag = \"form-data-boundary\", size = 25, boundary = tag + \"-\" + platform.generateString(size, BOUNDARY_ALPHABET) } = options || {};\n    if (!utils$1.isFormData(form)) {\n        throw TypeError(\"FormData instance required\");\n    }\n    if (boundary.length < 1 || boundary.length > 70) {\n        throw Error(\"boundary must be 10-70 characters long\");\n    }\n    const boundaryBytes = textEncoder.encode(\"--\" + boundary + CRLF);\n    const footerBytes = textEncoder.encode(\"--\" + boundary + \"--\" + CRLF);\n    let contentLength = footerBytes.byteLength;\n    const parts = Array.from(form.entries()).map(([name, value])=>{\n        const part = new FormDataPart(name, value);\n        contentLength += part.size;\n        return part;\n    });\n    contentLength += boundaryBytes.byteLength * parts.length;\n    contentLength = utils$1.toFiniteNumber(contentLength);\n    const computedHeaders = {\n        \"Content-Type\": `multipart/form-data; boundary=${boundary}`\n    };\n    if (Number.isFinite(contentLength)) {\n        computedHeaders[\"Content-Length\"] = contentLength;\n    }\n    headersHandler && headersHandler(computedHeaders);\n    return stream.Readable.from(async function*() {\n        for (const part of parts){\n            yield boundaryBytes;\n            yield* part.encode();\n        }\n        yield footerBytes;\n    }());\n};\nconst formDataToStream$1 = formDataToStream;\nclass ZlibHeaderTransformStream extends stream__default[\"default\"].Transform {\n    __transform(chunk, encoding, callback) {\n        this.push(chunk);\n        callback();\n    }\n    _transform(chunk, encoding, callback) {\n        if (chunk.length !== 0) {\n            this._transform = this.__transform;\n            // Add Default Compression headers if no zlib headers are present\n            if (chunk[0] !== 120) {\n                const header = Buffer.alloc(2);\n                header[0] = 120; // Hex: 78\n                header[1] = 156; // Hex: 9C \n                this.push(header, encoding);\n            }\n        }\n        this.__transform(chunk, encoding, callback);\n    }\n}\nconst ZlibHeaderTransformStream$1 = ZlibHeaderTransformStream;\nconst callbackify = (fn, reducer)=>{\n    return utils$1.isAsyncFn(fn) ? function(...args) {\n        const cb = args.pop();\n        fn.apply(this, args).then((value)=>{\n            try {\n                reducer ? cb(null, ...reducer(value)) : cb(null, value);\n            } catch (err) {\n                cb(err);\n            }\n        }, cb);\n    } : fn;\n};\nconst callbackify$1 = callbackify;\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */ function speedometer(samplesCount, min) {\n    samplesCount = samplesCount || 10;\n    const bytes = new Array(samplesCount);\n    const timestamps = new Array(samplesCount);\n    let head = 0;\n    let tail = 0;\n    let firstSampleTS;\n    min = min !== undefined ? min : 1000;\n    return function push(chunkLength) {\n        const now = Date.now();\n        const startedAt = timestamps[tail];\n        if (!firstSampleTS) {\n            firstSampleTS = now;\n        }\n        bytes[head] = chunkLength;\n        timestamps[head] = now;\n        let i = tail;\n        let bytesCount = 0;\n        while(i !== head){\n            bytesCount += bytes[i++];\n            i = i % samplesCount;\n        }\n        head = (head + 1) % samplesCount;\n        if (head === tail) {\n            tail = (tail + 1) % samplesCount;\n        }\n        if (now - firstSampleTS < min) {\n            return;\n        }\n        const passed = startedAt && now - startedAt;\n        return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n    };\n}\n/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */ function throttle(fn, freq) {\n    let timestamp = 0;\n    let threshold = 1000 / freq;\n    let lastArgs;\n    let timer;\n    const invoke = (args, now = Date.now())=>{\n        timestamp = now;\n        lastArgs = null;\n        if (timer) {\n            clearTimeout(timer);\n            timer = null;\n        }\n        fn(...args);\n    };\n    const throttled = (...args)=>{\n        const now = Date.now();\n        const passed = now - timestamp;\n        if (passed >= threshold) {\n            invoke(args, now);\n        } else {\n            lastArgs = args;\n            if (!timer) {\n                timer = setTimeout(()=>{\n                    timer = null;\n                    invoke(lastArgs);\n                }, threshold - passed);\n            }\n        }\n    };\n    const flush = ()=>lastArgs && invoke(lastArgs);\n    return [\n        throttled,\n        flush\n    ];\n}\nconst progressEventReducer = (listener, isDownloadStream, freq = 3)=>{\n    let bytesNotified = 0;\n    const _speedometer = speedometer(50, 250);\n    return throttle((e)=>{\n        const loaded = e.loaded;\n        const total = e.lengthComputable ? e.total : undefined;\n        const progressBytes = loaded - bytesNotified;\n        const rate = _speedometer(progressBytes);\n        const inRange = loaded <= total;\n        bytesNotified = loaded;\n        const data = {\n            loaded,\n            total,\n            progress: total ? loaded / total : undefined,\n            bytes: progressBytes,\n            rate: rate ? rate : undefined,\n            estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n            event: e,\n            lengthComputable: total != null,\n            [isDownloadStream ? \"download\" : \"upload\"]: true\n        };\n        listener(data);\n    }, freq);\n};\nconst progressEventDecorator = (total, throttled)=>{\n    const lengthComputable = total != null;\n    return [\n        (loaded)=>throttled[0]({\n                lengthComputable,\n                total,\n                loaded\n            }),\n        throttled[1]\n    ];\n};\nconst asyncDecorator = (fn)=>(...args)=>utils$1.asap(()=>fn(...args));\nconst zlibOptions = {\n    flush: zlib__default[\"default\"].constants.Z_SYNC_FLUSH,\n    finishFlush: zlib__default[\"default\"].constants.Z_SYNC_FLUSH\n};\nconst brotliOptions = {\n    flush: zlib__default[\"default\"].constants.BROTLI_OPERATION_FLUSH,\n    finishFlush: zlib__default[\"default\"].constants.BROTLI_OPERATION_FLUSH\n};\nconst isBrotliSupported = utils$1.isFunction(zlib__default[\"default\"].createBrotliDecompress);\nconst { http: httpFollow, https: httpsFollow } = followRedirects__default[\"default\"];\nconst isHttps = /https:?/;\nconst supportedProtocols = platform.protocols.map((protocol)=>{\n    return protocol + \":\";\n});\nconst flushOnFinish = (stream, [throttled, flush])=>{\n    stream.on(\"end\", flush).on(\"error\", flush);\n    return throttled;\n};\n/**\n * If the proxy or config beforeRedirects functions are defined, call them with the options\n * object.\n *\n * @param {Object<string, any>} options - The options object that was passed to the request.\n *\n * @returns {Object<string, any>}\n */ function dispatchBeforeRedirect(options, responseDetails) {\n    if (options.beforeRedirects.proxy) {\n        options.beforeRedirects.proxy(options);\n    }\n    if (options.beforeRedirects.config) {\n        options.beforeRedirects.config(options, responseDetails);\n    }\n}\n/**\n * If the proxy or config afterRedirects functions are defined, call them with the options\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} configProxy configuration from Axios options object\n * @param {string} location\n *\n * @returns {http.ClientRequestArgs}\n */ function setProxy(options, configProxy, location) {\n    let proxy = configProxy;\n    if (!proxy && proxy !== false) {\n        const proxyUrl = proxyFromEnv__default[\"default\"].getProxyForUrl(location);\n        if (proxyUrl) {\n            proxy = new URL(proxyUrl);\n        }\n    }\n    if (proxy) {\n        // Basic proxy authorization\n        if (proxy.username) {\n            proxy.auth = (proxy.username || \"\") + \":\" + (proxy.password || \"\");\n        }\n        if (proxy.auth) {\n            // Support proxy auth object form\n            if (proxy.auth.username || proxy.auth.password) {\n                proxy.auth = (proxy.auth.username || \"\") + \":\" + (proxy.auth.password || \"\");\n            }\n            const base64 = Buffer.from(proxy.auth, \"utf8\").toString(\"base64\");\n            options.headers[\"Proxy-Authorization\"] = \"Basic \" + base64;\n        }\n        options.headers.host = options.hostname + (options.port ? \":\" + options.port : \"\");\n        const proxyHost = proxy.hostname || proxy.host;\n        options.hostname = proxyHost;\n        // Replace 'host' since options is not a URL object\n        options.host = proxyHost;\n        options.port = proxy.port;\n        options.path = location;\n        if (proxy.protocol) {\n            options.protocol = proxy.protocol.includes(\":\") ? proxy.protocol : `${proxy.protocol}:`;\n        }\n    }\n    options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {\n        // Configure proxy for redirected request, passing the original config proxy to apply\n        // the exact same logic as if the redirected request was performed by axios directly.\n        setProxy(redirectOptions, configProxy, redirectOptions.href);\n    };\n}\nconst isHttpAdapterSupported = typeof process !== \"undefined\" && utils$1.kindOf(process) === \"process\";\n// temporary hotfix\nconst wrapAsync = (asyncExecutor)=>{\n    return new Promise((resolve, reject)=>{\n        let onDone;\n        let isDone;\n        const done = (value, isRejected)=>{\n            if (isDone) return;\n            isDone = true;\n            onDone && onDone(value, isRejected);\n        };\n        const _resolve = (value)=>{\n            done(value);\n            resolve(value);\n        };\n        const _reject = (reason)=>{\n            done(reason, true);\n            reject(reason);\n        };\n        asyncExecutor(_resolve, _reject, (onDoneHandler)=>onDone = onDoneHandler).catch(_reject);\n    });\n};\nconst resolveFamily = ({ address, family })=>{\n    if (!utils$1.isString(address)) {\n        throw TypeError(\"address must be a string\");\n    }\n    return {\n        address,\n        family: family || (address.indexOf(\".\") < 0 ? 6 : 4)\n    };\n};\nconst buildAddressEntry = (address, family)=>resolveFamily(utils$1.isObject(address) ? address : {\n        address,\n        family\n    });\n/*eslint consistent-return:0*/ const httpAdapter = isHttpAdapterSupported && function httpAdapter(config) {\n    return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {\n        let { data, lookup, family } = config;\n        const { responseType, responseEncoding } = config;\n        const method = config.method.toUpperCase();\n        let isDone;\n        let rejected = false;\n        let req;\n        if (lookup) {\n            const _lookup = callbackify$1(lookup, (value)=>utils$1.isArray(value) ? value : [\n                    value\n                ]);\n            // hotfix to support opt.all option which is required for node 20.x\n            lookup = (hostname, opt, cb)=>{\n                _lookup(hostname, opt, (err, arg0, arg1)=>{\n                    if (err) {\n                        return cb(err);\n                    }\n                    const addresses = utils$1.isArray(arg0) ? arg0.map((addr)=>buildAddressEntry(addr)) : [\n                        buildAddressEntry(arg0, arg1)\n                    ];\n                    opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);\n                });\n            };\n        }\n        // temporary internal emitter until the AxiosRequest class will be implemented\n        const emitter = new events.EventEmitter();\n        const onFinished = ()=>{\n            if (config.cancelToken) {\n                config.cancelToken.unsubscribe(abort);\n            }\n            if (config.signal) {\n                config.signal.removeEventListener(\"abort\", abort);\n            }\n            emitter.removeAllListeners();\n        };\n        onDone((value, isRejected)=>{\n            isDone = true;\n            if (isRejected) {\n                rejected = true;\n                onFinished();\n            }\n        });\n        function abort(reason) {\n            emitter.emit(\"abort\", !reason || reason.type ? new CanceledError(null, config, req) : reason);\n        }\n        emitter.once(\"abort\", reject);\n        if (config.cancelToken || config.signal) {\n            config.cancelToken && config.cancelToken.subscribe(abort);\n            if (config.signal) {\n                config.signal.aborted ? abort() : config.signal.addEventListener(\"abort\", abort);\n            }\n        }\n        // Parse url\n        const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);\n        const parsed = new URL(fullPath, platform.hasBrowserEnv ? platform.origin : undefined);\n        const protocol = parsed.protocol || supportedProtocols[0];\n        if (protocol === \"data:\") {\n            let convertedData;\n            if (method !== \"GET\") {\n                return settle(resolve, reject, {\n                    status: 405,\n                    statusText: \"method not allowed\",\n                    headers: {},\n                    config\n                });\n            }\n            try {\n                convertedData = fromDataURI(config.url, responseType === \"blob\", {\n                    Blob: config.env && config.env.Blob\n                });\n            } catch (err) {\n                throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);\n            }\n            if (responseType === \"text\") {\n                convertedData = convertedData.toString(responseEncoding);\n                if (!responseEncoding || responseEncoding === \"utf8\") {\n                    convertedData = utils$1.stripBOM(convertedData);\n                }\n            } else if (responseType === \"stream\") {\n                convertedData = stream__default[\"default\"].Readable.from(convertedData);\n            }\n            return settle(resolve, reject, {\n                data: convertedData,\n                status: 200,\n                statusText: \"OK\",\n                headers: new AxiosHeaders$1(),\n                config\n            });\n        }\n        if (supportedProtocols.indexOf(protocol) === -1) {\n            return reject(new AxiosError(\"Unsupported protocol \" + protocol, AxiosError.ERR_BAD_REQUEST, config));\n        }\n        const headers = AxiosHeaders$1.from(config.headers).normalize();\n        // Set User-Agent (required by some servers)\n        // See https://github.com/axios/axios/issues/69\n        // User-Agent is specified; handle case where no UA header is desired\n        // Only set header if it hasn't been set in config\n        headers.set(\"User-Agent\", \"axios/\" + VERSION, false);\n        const { onUploadProgress, onDownloadProgress } = config;\n        const maxRate = config.maxRate;\n        let maxUploadRate = undefined;\n        let maxDownloadRate = undefined;\n        // support for spec compliant FormData objects\n        if (utils$1.isSpecCompliantForm(data)) {\n            const userBoundary = headers.getContentType(/boundary=([-_\\w\\d]{10,70})/i);\n            data = formDataToStream$1(data, (formHeaders)=>{\n                headers.set(formHeaders);\n            }, {\n                tag: `axios-${VERSION}-boundary`,\n                boundary: userBoundary && userBoundary[1] || undefined\n            });\n        // support for https://www.npmjs.com/package/form-data api\n        } else if (utils$1.isFormData(data) && utils$1.isFunction(data.getHeaders)) {\n            headers.set(data.getHeaders());\n            if (!headers.hasContentLength()) {\n                try {\n                    const knownLength = await util__default[\"default\"].promisify(data.getLength).call(data);\n                    Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);\n                /*eslint no-empty:0*/ } catch (e) {}\n            }\n        } else if (utils$1.isBlob(data) || utils$1.isFile(data)) {\n            data.size && headers.setContentType(data.type || \"application/octet-stream\");\n            headers.setContentLength(data.size || 0);\n            data = stream__default[\"default\"].Readable.from(readBlob$1(data));\n        } else if (data && !utils$1.isStream(data)) {\n            if (Buffer.isBuffer(data)) ;\n            else if (utils$1.isArrayBuffer(data)) {\n                data = Buffer.from(new Uint8Array(data));\n            } else if (utils$1.isString(data)) {\n                data = Buffer.from(data, \"utf-8\");\n            } else {\n                return reject(new AxiosError(\"Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream\", AxiosError.ERR_BAD_REQUEST, config));\n            }\n            // Add Content-Length header if data exists\n            headers.setContentLength(data.length, false);\n            if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n                return reject(new AxiosError(\"Request body larger than maxBodyLength limit\", AxiosError.ERR_BAD_REQUEST, config));\n            }\n        }\n        const contentLength = utils$1.toFiniteNumber(headers.getContentLength());\n        if (utils$1.isArray(maxRate)) {\n            maxUploadRate = maxRate[0];\n            maxDownloadRate = maxRate[1];\n        } else {\n            maxUploadRate = maxDownloadRate = maxRate;\n        }\n        if (data && (onUploadProgress || maxUploadRate)) {\n            if (!utils$1.isStream(data)) {\n                data = stream__default[\"default\"].Readable.from(data, {\n                    objectMode: false\n                });\n            }\n            data = stream__default[\"default\"].pipeline([\n                data,\n                new AxiosTransformStream$1({\n                    maxRate: utils$1.toFiniteNumber(maxUploadRate)\n                })\n            ], utils$1.noop);\n            onUploadProgress && data.on(\"progress\", flushOnFinish(data, progressEventDecorator(contentLength, progressEventReducer(asyncDecorator(onUploadProgress), false, 3))));\n        }\n        // HTTP basic authentication\n        let auth = undefined;\n        if (config.auth) {\n            const username = config.auth.username || \"\";\n            const password = config.auth.password || \"\";\n            auth = username + \":\" + password;\n        }\n        if (!auth && parsed.username) {\n            const urlUsername = parsed.username;\n            const urlPassword = parsed.password;\n            auth = urlUsername + \":\" + urlPassword;\n        }\n        auth && headers.delete(\"authorization\");\n        let path;\n        try {\n            path = buildURL(parsed.pathname + parsed.search, config.params, config.paramsSerializer).replace(/^\\?/, \"\");\n        } catch (err) {\n            const customErr = new Error(err.message);\n            customErr.config = config;\n            customErr.url = config.url;\n            customErr.exists = true;\n            return reject(customErr);\n        }\n        headers.set(\"Accept-Encoding\", \"gzip, compress, deflate\" + (isBrotliSupported ? \", br\" : \"\"), false);\n        const options = {\n            path,\n            method: method,\n            headers: headers.toJSON(),\n            agents: {\n                http: config.httpAgent,\n                https: config.httpsAgent\n            },\n            auth,\n            protocol,\n            family,\n            beforeRedirect: dispatchBeforeRedirect,\n            beforeRedirects: {}\n        };\n        // cacheable-lookup integration hotfix\n        !utils$1.isUndefined(lookup) && (options.lookup = lookup);\n        if (config.socketPath) {\n            options.socketPath = config.socketPath;\n        } else {\n            options.hostname = parsed.hostname.startsWith(\"[\") ? parsed.hostname.slice(1, -1) : parsed.hostname;\n            options.port = parsed.port;\n            setProxy(options, config.proxy, protocol + \"//\" + parsed.hostname + (parsed.port ? \":\" + parsed.port : \"\") + options.path);\n        }\n        let transport;\n        const isHttpsRequest = isHttps.test(options.protocol);\n        options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n        if (config.transport) {\n            transport = config.transport;\n        } else if (config.maxRedirects === 0) {\n            transport = isHttpsRequest ? https__default[\"default\"] : http__default[\"default\"];\n        } else {\n            if (config.maxRedirects) {\n                options.maxRedirects = config.maxRedirects;\n            }\n            if (config.beforeRedirect) {\n                options.beforeRedirects.config = config.beforeRedirect;\n            }\n            transport = isHttpsRequest ? httpsFollow : httpFollow;\n        }\n        if (config.maxBodyLength > -1) {\n            options.maxBodyLength = config.maxBodyLength;\n        } else {\n            // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited\n            options.maxBodyLength = Infinity;\n        }\n        if (config.insecureHTTPParser) {\n            options.insecureHTTPParser = config.insecureHTTPParser;\n        }\n        // Create the request\n        req = transport.request(options, function handleResponse(res) {\n            if (req.destroyed) return;\n            const streams = [\n                res\n            ];\n            const responseLength = +res.headers[\"content-length\"];\n            if (onDownloadProgress || maxDownloadRate) {\n                const transformStream = new AxiosTransformStream$1({\n                    maxRate: utils$1.toFiniteNumber(maxDownloadRate)\n                });\n                onDownloadProgress && transformStream.on(\"progress\", flushOnFinish(transformStream, progressEventDecorator(responseLength, progressEventReducer(asyncDecorator(onDownloadProgress), true, 3))));\n                streams.push(transformStream);\n            }\n            // decompress the response body transparently if required\n            let responseStream = res;\n            // return the last request in case of redirects\n            const lastRequest = res.req || req;\n            // if decompress disabled we should not decompress\n            if (config.decompress !== false && res.headers[\"content-encoding\"]) {\n                // if no content, but headers still say that it is encoded,\n                // remove the header not confuse downstream operations\n                if (method === \"HEAD\" || res.statusCode === 204) {\n                    delete res.headers[\"content-encoding\"];\n                }\n                switch((res.headers[\"content-encoding\"] || \"\").toLowerCase()){\n                    /*eslint default-case:0*/ case \"gzip\":\n                    case \"x-gzip\":\n                    case \"compress\":\n                    case \"x-compress\":\n                        // add the unzipper to the body stream processing pipeline\n                        streams.push(zlib__default[\"default\"].createUnzip(zlibOptions));\n                        // remove the content-encoding in order to not confuse downstream operations\n                        delete res.headers[\"content-encoding\"];\n                        break;\n                    case \"deflate\":\n                        streams.push(new ZlibHeaderTransformStream$1());\n                        // add the unzipper to the body stream processing pipeline\n                        streams.push(zlib__default[\"default\"].createUnzip(zlibOptions));\n                        // remove the content-encoding in order to not confuse downstream operations\n                        delete res.headers[\"content-encoding\"];\n                        break;\n                    case \"br\":\n                        if (isBrotliSupported) {\n                            streams.push(zlib__default[\"default\"].createBrotliDecompress(brotliOptions));\n                            delete res.headers[\"content-encoding\"];\n                        }\n                }\n            }\n            responseStream = streams.length > 1 ? stream__default[\"default\"].pipeline(streams, utils$1.noop) : streams[0];\n            const offListeners = stream__default[\"default\"].finished(responseStream, ()=>{\n                offListeners();\n                onFinished();\n            });\n            const response = {\n                status: res.statusCode,\n                statusText: res.statusMessage,\n                headers: new AxiosHeaders$1(res.headers),\n                config,\n                request: lastRequest\n            };\n            if (responseType === \"stream\") {\n                response.data = responseStream;\n                settle(resolve, reject, response);\n            } else {\n                const responseBuffer = [];\n                let totalResponseBytes = 0;\n                responseStream.on(\"data\", function handleStreamData(chunk) {\n                    responseBuffer.push(chunk);\n                    totalResponseBytes += chunk.length;\n                    // make sure the content length is not over the maxContentLength if specified\n                    if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n                        // stream.destroy() emit aborted event before calling reject() on Node.js v16\n                        rejected = true;\n                        responseStream.destroy();\n                        reject(new AxiosError(\"maxContentLength size of \" + config.maxContentLength + \" exceeded\", AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n                    }\n                });\n                responseStream.on(\"aborted\", function handlerStreamAborted() {\n                    if (rejected) {\n                        return;\n                    }\n                    const err = new AxiosError(\"stream has been aborted\", AxiosError.ERR_BAD_RESPONSE, config, lastRequest);\n                    responseStream.destroy(err);\n                    reject(err);\n                });\n                responseStream.on(\"error\", function handleStreamError(err) {\n                    if (req.destroyed) return;\n                    reject(AxiosError.from(err, null, config, lastRequest));\n                });\n                responseStream.on(\"end\", function handleStreamEnd() {\n                    try {\n                        let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n                        if (responseType !== \"arraybuffer\") {\n                            responseData = responseData.toString(responseEncoding);\n                            if (!responseEncoding || responseEncoding === \"utf8\") {\n                                responseData = utils$1.stripBOM(responseData);\n                            }\n                        }\n                        response.data = responseData;\n                    } catch (err) {\n                        return reject(AxiosError.from(err, null, config, response.request, response));\n                    }\n                    settle(resolve, reject, response);\n                });\n            }\n            emitter.once(\"abort\", (err)=>{\n                if (!responseStream.destroyed) {\n                    responseStream.emit(\"error\", err);\n                    responseStream.destroy();\n                }\n            });\n        });\n        emitter.once(\"abort\", (err)=>{\n            reject(err);\n            req.destroy(err);\n        });\n        // Handle errors\n        req.on(\"error\", function handleRequestError(err) {\n            // @todo remove\n            // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n            reject(AxiosError.from(err, null, config, req));\n        });\n        // set tcp keep alive to prevent drop connection by peer\n        req.on(\"socket\", function handleRequestSocket(socket) {\n            // default interval of sending ack packet is 1 minute\n            socket.setKeepAlive(true, 1000 * 60);\n        });\n        // Handle request timeout\n        if (config.timeout) {\n            // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n            const timeout = parseInt(config.timeout, 10);\n            if (Number.isNaN(timeout)) {\n                reject(new AxiosError(\"error trying to parse `config.timeout` to int\", AxiosError.ERR_BAD_OPTION_VALUE, config, req));\n                return;\n            }\n            // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n            // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n            // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n            // And then these socket which be hang up will devouring CPU little by little.\n            // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n            req.setTimeout(timeout, function handleRequestTimeout() {\n                if (isDone) return;\n                let timeoutErrorMessage = config.timeout ? \"timeout of \" + config.timeout + \"ms exceeded\" : \"timeout exceeded\";\n                const transitional = config.transitional || transitionalDefaults;\n                if (config.timeoutErrorMessage) {\n                    timeoutErrorMessage = config.timeoutErrorMessage;\n                }\n                reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, req));\n                abort();\n            });\n        }\n        // Send the request\n        if (utils$1.isStream(data)) {\n            let ended = false;\n            let errored = false;\n            data.on(\"end\", ()=>{\n                ended = true;\n            });\n            data.once(\"error\", (err)=>{\n                errored = true;\n                req.destroy(err);\n            });\n            data.on(\"close\", ()=>{\n                if (!ended && !errored) {\n                    abort(new CanceledError(\"Request stream has been aborted\", config, req));\n                }\n            });\n            data.pipe(req);\n        } else {\n            req.end(data);\n        }\n    });\n};\nconst isURLSameOrigin = platform.hasStandardBrowserEnv ? ((origin, isMSIE)=>(url)=>{\n        url = new URL(url, platform.origin);\n        return origin.protocol === url.protocol && origin.host === url.host && (isMSIE || origin.port === url.port);\n    })(new URL(platform.origin), platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)) : ()=>true;\nconst cookies = platform.hasStandardBrowserEnv ? // Standard browser envs support document.cookie\n{\n    write (name, value, expires, path, domain, secure) {\n        const cookie = [\n            name + \"=\" + encodeURIComponent(value)\n        ];\n        utils$1.isNumber(expires) && cookie.push(\"expires=\" + new Date(expires).toGMTString());\n        utils$1.isString(path) && cookie.push(\"path=\" + path);\n        utils$1.isString(domain) && cookie.push(\"domain=\" + domain);\n        secure === true && cookie.push(\"secure\");\n        document.cookie = cookie.join(\"; \");\n    },\n    read (name) {\n        const match = document.cookie.match(new RegExp(\"(^|;\\\\s*)(\" + name + \")=([^;]*)\"));\n        return match ? decodeURIComponent(match[3]) : null;\n    },\n    remove (name) {\n        this.write(name, \"\", Date.now() - 86400000);\n    }\n} : // Non-standard browser env (web workers, react-native) lack needed support.\n{\n    write () {},\n    read () {\n        return null;\n    },\n    remove () {}\n};\nconst headersToObject = (thing)=>thing instanceof AxiosHeaders$1 ? {\n        ...thing\n    } : thing;\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */ function mergeConfig(config1, config2) {\n    // eslint-disable-next-line no-param-reassign\n    config2 = config2 || {};\n    const config = {};\n    function getMergedValue(target, source, prop, caseless) {\n        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {\n            return utils$1.merge.call({\n                caseless\n            }, target, source);\n        } else if (utils$1.isPlainObject(source)) {\n            return utils$1.merge({}, source);\n        } else if (utils$1.isArray(source)) {\n            return source.slice();\n        }\n        return source;\n    }\n    // eslint-disable-next-line consistent-return\n    function mergeDeepProperties(a, b, prop, caseless) {\n        if (!utils$1.isUndefined(b)) {\n            return getMergedValue(a, b, prop, caseless);\n        } else if (!utils$1.isUndefined(a)) {\n            return getMergedValue(undefined, a, prop, caseless);\n        }\n    }\n    // eslint-disable-next-line consistent-return\n    function valueFromConfig2(a, b) {\n        if (!utils$1.isUndefined(b)) {\n            return getMergedValue(undefined, b);\n        }\n    }\n    // eslint-disable-next-line consistent-return\n    function defaultToConfig2(a, b) {\n        if (!utils$1.isUndefined(b)) {\n            return getMergedValue(undefined, b);\n        } else if (!utils$1.isUndefined(a)) {\n            return getMergedValue(undefined, a);\n        }\n    }\n    // eslint-disable-next-line consistent-return\n    function mergeDirectKeys(a, b, prop) {\n        if (prop in config2) {\n            return getMergedValue(a, b);\n        } else if (prop in config1) {\n            return getMergedValue(undefined, a);\n        }\n    }\n    const mergeMap = {\n        url: valueFromConfig2,\n        method: valueFromConfig2,\n        data: valueFromConfig2,\n        baseURL: defaultToConfig2,\n        transformRequest: defaultToConfig2,\n        transformResponse: defaultToConfig2,\n        paramsSerializer: defaultToConfig2,\n        timeout: defaultToConfig2,\n        timeoutMessage: defaultToConfig2,\n        withCredentials: defaultToConfig2,\n        withXSRFToken: defaultToConfig2,\n        adapter: defaultToConfig2,\n        responseType: defaultToConfig2,\n        xsrfCookieName: defaultToConfig2,\n        xsrfHeaderName: defaultToConfig2,\n        onUploadProgress: defaultToConfig2,\n        onDownloadProgress: defaultToConfig2,\n        decompress: defaultToConfig2,\n        maxContentLength: defaultToConfig2,\n        maxBodyLength: defaultToConfig2,\n        beforeRedirect: defaultToConfig2,\n        transport: defaultToConfig2,\n        httpAgent: defaultToConfig2,\n        httpsAgent: defaultToConfig2,\n        cancelToken: defaultToConfig2,\n        socketPath: defaultToConfig2,\n        responseEncoding: defaultToConfig2,\n        validateStatus: mergeDirectKeys,\n        headers: (a, b, prop)=>mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)\n    };\n    utils$1.forEach(Object.keys({\n        ...config1,\n        ...config2\n    }), function computeConfigValue(prop) {\n        const merge = mergeMap[prop] || mergeDeepProperties;\n        const configValue = merge(config1[prop], config2[prop], prop);\n        utils$1.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);\n    });\n    return config;\n}\nconst resolveConfig = (config)=>{\n    const newConfig = mergeConfig({}, config);\n    let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;\n    newConfig.headers = headers = AxiosHeaders$1.from(headers);\n    newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);\n    // HTTP basic authentication\n    if (auth) {\n        headers.set(\"Authorization\", \"Basic \" + btoa((auth.username || \"\") + \":\" + (auth.password ? unescape(encodeURIComponent(auth.password)) : \"\")));\n    }\n    let contentType;\n    if (utils$1.isFormData(data)) {\n        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n            headers.setContentType(undefined); // Let the browser set it\n        } else if ((contentType = headers.getContentType()) !== false) {\n            // fix semicolon duplication issue for ReactNative FormData implementation\n            const [type, ...tokens] = contentType ? contentType.split(\";\").map((token)=>token.trim()).filter(Boolean) : [];\n            headers.setContentType([\n                type || \"multipart/form-data\",\n                ...tokens\n            ].join(\"; \"));\n        }\n    }\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (platform.hasStandardBrowserEnv) {\n        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {\n            // Add xsrf header\n            const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n            if (xsrfValue) {\n                headers.set(xsrfHeaderName, xsrfValue);\n            }\n        }\n    }\n    return newConfig;\n};\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== \"undefined\";\nconst xhrAdapter = isXHRAdapterSupported && function(config) {\n    return new Promise(function dispatchXhrRequest(resolve, reject) {\n        const _config = resolveConfig(config);\n        let requestData = _config.data;\n        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();\n        let { responseType, onUploadProgress, onDownloadProgress } = _config;\n        let onCanceled;\n        let uploadThrottled, downloadThrottled;\n        let flushUpload, flushDownload;\n        function done() {\n            flushUpload && flushUpload(); // flush events\n            flushDownload && flushDownload(); // flush events\n            _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);\n            _config.signal && _config.signal.removeEventListener(\"abort\", onCanceled);\n        }\n        let request = new XMLHttpRequest();\n        request.open(_config.method.toUpperCase(), _config.url, true);\n        // Set the request timeout in MS\n        request.timeout = _config.timeout;\n        function onloadend() {\n            if (!request) {\n                return;\n            }\n            // Prepare the response\n            const responseHeaders = AxiosHeaders$1.from(\"getAllResponseHeaders\" in request && request.getAllResponseHeaders());\n            const responseData = !responseType || responseType === \"text\" || responseType === \"json\" ? request.responseText : request.response;\n            const response = {\n                data: responseData,\n                status: request.status,\n                statusText: request.statusText,\n                headers: responseHeaders,\n                config,\n                request\n            };\n            settle(function _resolve(value) {\n                resolve(value);\n                done();\n            }, function _reject(err) {\n                reject(err);\n                done();\n            }, response);\n            // Clean up request\n            request = null;\n        }\n        if (\"onloadend\" in request) {\n            // Use onloadend if available\n            request.onloadend = onloadend;\n        } else {\n            // Listen for ready state to emulate onloadend\n            request.onreadystatechange = function handleLoad() {\n                if (!request || request.readyState !== 4) {\n                    return;\n                }\n                // The request errored out and we didn't get a response, this will be\n                // handled by onerror instead\n                // With one exception: request that using file: protocol, most browsers\n                // will return status as 0 even though it's a successful request\n                if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\"file:\") === 0)) {\n                    return;\n                }\n                // readystate handler is calling before onerror or ontimeout handlers,\n                // so we should call onloadend on the next 'tick'\n                setTimeout(onloadend);\n            };\n        }\n        // Handle browser request cancellation (as opposed to a manual cancellation)\n        request.onabort = function handleAbort() {\n            if (!request) {\n                return;\n            }\n            reject(new AxiosError(\"Request aborted\", AxiosError.ECONNABORTED, config, request));\n            // Clean up request\n            request = null;\n        };\n        // Handle low level network errors\n        request.onerror = function handleError() {\n            // Real errors are hidden from us by the browser\n            // onerror should only fire if it's a network error\n            reject(new AxiosError(\"Network Error\", AxiosError.ERR_NETWORK, config, request));\n            // Clean up request\n            request = null;\n        };\n        // Handle timeout\n        request.ontimeout = function handleTimeout() {\n            let timeoutErrorMessage = _config.timeout ? \"timeout of \" + _config.timeout + \"ms exceeded\" : \"timeout exceeded\";\n            const transitional = _config.transitional || transitionalDefaults;\n            if (_config.timeoutErrorMessage) {\n                timeoutErrorMessage = _config.timeoutErrorMessage;\n            }\n            reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request));\n            // Clean up request\n            request = null;\n        };\n        // Remove Content-Type if data is undefined\n        requestData === undefined && requestHeaders.setContentType(null);\n        // Add headers to the request\n        if (\"setRequestHeader\" in request) {\n            utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n                request.setRequestHeader(key, val);\n            });\n        }\n        // Add withCredentials to request if needed\n        if (!utils$1.isUndefined(_config.withCredentials)) {\n            request.withCredentials = !!_config.withCredentials;\n        }\n        // Add responseType to request if needed\n        if (responseType && responseType !== \"json\") {\n            request.responseType = _config.responseType;\n        }\n        // Handle progress if needed\n        if (onDownloadProgress) {\n            [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);\n            request.addEventListener(\"progress\", downloadThrottled);\n        }\n        // Not all browsers support upload events\n        if (onUploadProgress && request.upload) {\n            [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);\n            request.upload.addEventListener(\"progress\", uploadThrottled);\n            request.upload.addEventListener(\"loadend\", flushUpload);\n        }\n        if (_config.cancelToken || _config.signal) {\n            // Handle cancellation\n            // eslint-disable-next-line func-names\n            onCanceled = (cancel)=>{\n                if (!request) {\n                    return;\n                }\n                reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n                request.abort();\n                request = null;\n            };\n            _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n            if (_config.signal) {\n                _config.signal.aborted ? onCanceled() : _config.signal.addEventListener(\"abort\", onCanceled);\n            }\n        }\n        const protocol = parseProtocol(_config.url);\n        if (protocol && platform.protocols.indexOf(protocol) === -1) {\n            reject(new AxiosError(\"Unsupported protocol \" + protocol + \":\", AxiosError.ERR_BAD_REQUEST, config));\n            return;\n        }\n        // Send the request\n        request.send(requestData || null);\n    });\n};\nconst composeSignals = (signals, timeout)=>{\n    const { length } = signals = signals ? signals.filter(Boolean) : [];\n    if (timeout || length) {\n        let controller = new AbortController();\n        let aborted;\n        const onabort = function(reason) {\n            if (!aborted) {\n                aborted = true;\n                unsubscribe();\n                const err = reason instanceof Error ? reason : this.reason;\n                controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n            }\n        };\n        let timer = timeout && setTimeout(()=>{\n            timer = null;\n            onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));\n        }, timeout);\n        const unsubscribe = ()=>{\n            if (signals) {\n                timer && clearTimeout(timer);\n                timer = null;\n                signals.forEach((signal)=>{\n                    signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener(\"abort\", onabort);\n                });\n                signals = null;\n            }\n        };\n        signals.forEach((signal)=>signal.addEventListener(\"abort\", onabort));\n        const { signal } = controller;\n        signal.unsubscribe = ()=>utils$1.asap(unsubscribe);\n        return signal;\n    }\n};\nconst composeSignals$1 = composeSignals;\nconst streamChunk = function*(chunk, chunkSize) {\n    let len = chunk.byteLength;\n    if (!chunkSize || len < chunkSize) {\n        yield chunk;\n        return;\n    }\n    let pos = 0;\n    let end;\n    while(pos < len){\n        end = pos + chunkSize;\n        yield chunk.slice(pos, end);\n        pos = end;\n    }\n};\nconst readBytes = async function*(iterable, chunkSize) {\n    for await (const chunk of readStream(iterable)){\n        yield* streamChunk(chunk, chunkSize);\n    }\n};\nconst readStream = async function*(stream) {\n    if (stream[Symbol.asyncIterator]) {\n        yield* stream;\n        return;\n    }\n    const reader = stream.getReader();\n    try {\n        for(;;){\n            const { done, value } = await reader.read();\n            if (done) {\n                break;\n            }\n            yield value;\n        }\n    } finally{\n        await reader.cancel();\n    }\n};\nconst trackStream = (stream, chunkSize, onProgress, onFinish)=>{\n    const iterator = readBytes(stream, chunkSize);\n    let bytes = 0;\n    let done;\n    let _onFinish = (e)=>{\n        if (!done) {\n            done = true;\n            onFinish && onFinish(e);\n        }\n    };\n    return new ReadableStream({\n        async pull (controller) {\n            try {\n                const { done, value } = await iterator.next();\n                if (done) {\n                    _onFinish();\n                    controller.close();\n                    return;\n                }\n                let len = value.byteLength;\n                if (onProgress) {\n                    let loadedBytes = bytes += len;\n                    onProgress(loadedBytes);\n                }\n                controller.enqueue(new Uint8Array(value));\n            } catch (err) {\n                _onFinish(err);\n                throw err;\n            }\n        },\n        cancel (reason) {\n            _onFinish(reason);\n            return iterator.return();\n        }\n    }, {\n        highWaterMark: 2\n    });\n};\nconst isFetchSupported = typeof fetch === \"function\" && typeof Request === \"function\" && typeof Response === \"function\";\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === \"function\";\n// used only inside the fetch adapter\nconst encodeText = isFetchSupported && (typeof TextEncoder === \"function\" ? ((encoder)=>(str)=>encoder.encode(str))(new TextEncoder()) : async (str)=>new Uint8Array(await new Response(str).arrayBuffer()));\nconst test = (fn, ...args)=>{\n    try {\n        return !!fn(...args);\n    } catch (e) {\n        return false;\n    }\n};\nconst supportsRequestStream = isReadableStreamSupported && test(()=>{\n    let duplexAccessed = false;\n    const hasContentType = new Request(platform.origin, {\n        body: new ReadableStream(),\n        method: \"POST\",\n        get duplex () {\n            duplexAccessed = true;\n            return \"half\";\n        }\n    }).headers.has(\"Content-Type\");\n    return duplexAccessed && !hasContentType;\n});\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\nconst supportsResponseStream = isReadableStreamSupported && test(()=>utils$1.isReadableStream(new Response(\"\").body));\nconst resolvers = {\n    stream: supportsResponseStream && ((res)=>res.body)\n};\nisFetchSupported && ((res)=>{\n    [\n        \"text\",\n        \"arrayBuffer\",\n        \"blob\",\n        \"formData\",\n        \"stream\"\n    ].forEach((type)=>{\n        !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res)=>res[type]() : (_, config)=>{\n            throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n        });\n    });\n})(new Response);\nconst getBodyLength = async (body)=>{\n    if (body == null) {\n        return 0;\n    }\n    if (utils$1.isBlob(body)) {\n        return body.size;\n    }\n    if (utils$1.isSpecCompliantForm(body)) {\n        const _request = new Request(platform.origin, {\n            method: \"POST\",\n            body\n        });\n        return (await _request.arrayBuffer()).byteLength;\n    }\n    if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {\n        return body.byteLength;\n    }\n    if (utils$1.isURLSearchParams(body)) {\n        body = body + \"\";\n    }\n    if (utils$1.isString(body)) {\n        return (await encodeText(body)).byteLength;\n    }\n};\nconst resolveBodyLength = async (headers, body)=>{\n    const length = utils$1.toFiniteNumber(headers.getContentLength());\n    return length == null ? getBodyLength(body) : length;\n};\nconst fetchAdapter = isFetchSupported && (async (config)=>{\n    let { url, method, data, signal, cancelToken, timeout, onDownloadProgress, onUploadProgress, responseType, headers, withCredentials = \"same-origin\", fetchOptions } = resolveConfig(config);\n    responseType = responseType ? (responseType + \"\").toLowerCase() : \"text\";\n    let composedSignal = composeSignals$1([\n        signal,\n        cancelToken && cancelToken.toAbortSignal()\n    ], timeout);\n    let request;\n    const unsubscribe = composedSignal && composedSignal.unsubscribe && (()=>{\n        composedSignal.unsubscribe();\n    });\n    let requestContentLength;\n    try {\n        if (onUploadProgress && supportsRequestStream && method !== \"get\" && method !== \"head\" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {\n            let _request = new Request(url, {\n                method: \"POST\",\n                body: data,\n                duplex: \"half\"\n            });\n            let contentTypeHeader;\n            if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get(\"content-type\"))) {\n                headers.setContentType(contentTypeHeader);\n            }\n            if (_request.body) {\n                const [onProgress, flush] = progressEventDecorator(requestContentLength, progressEventReducer(asyncDecorator(onUploadProgress)));\n                data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);\n            }\n        }\n        if (!utils$1.isString(withCredentials)) {\n            withCredentials = withCredentials ? \"include\" : \"omit\";\n        }\n        // Cloudflare Workers throws when credentials are defined\n        // see https://github.com/cloudflare/workerd/issues/902\n        const isCredentialsSupported = \"credentials\" in Request.prototype;\n        request = new Request(url, {\n            ...fetchOptions,\n            signal: composedSignal,\n            method: method.toUpperCase(),\n            headers: headers.normalize().toJSON(),\n            body: data,\n            duplex: \"half\",\n            credentials: isCredentialsSupported ? withCredentials : undefined\n        });\n        let response = await fetch(request, fetchOptions);\n        const isStreamResponse = supportsResponseStream && (responseType === \"stream\" || responseType === \"response\");\n        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {\n            const options = {};\n            [\n                \"status\",\n                \"statusText\",\n                \"headers\"\n            ].forEach((prop)=>{\n                options[prop] = response[prop];\n            });\n            const responseContentLength = utils$1.toFiniteNumber(response.headers.get(\"content-length\"));\n            const [onProgress, flush] = onDownloadProgress && progressEventDecorator(responseContentLength, progressEventReducer(asyncDecorator(onDownloadProgress), true)) || [];\n            response = new Response(trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, ()=>{\n                flush && flush();\n                unsubscribe && unsubscribe();\n            }), options);\n        }\n        responseType = responseType || \"text\";\n        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || \"text\"](response, config);\n        !isStreamResponse && unsubscribe && unsubscribe();\n        return await new Promise((resolve, reject)=>{\n            settle(resolve, reject, {\n                data: responseData,\n                headers: AxiosHeaders$1.from(response.headers),\n                status: response.status,\n                statusText: response.statusText,\n                config,\n                request\n            });\n        });\n    } catch (err) {\n        unsubscribe && unsubscribe();\n        if (err && err.name === \"TypeError\" && /Load failed|fetch/i.test(err.message)) {\n            throw Object.assign(new AxiosError(\"Network Error\", AxiosError.ERR_NETWORK, config, request), {\n                cause: err.cause || err\n            });\n        }\n        throw AxiosError.from(err, err && err.code, config, request);\n    }\n});\nconst knownAdapters = {\n    http: httpAdapter,\n    xhr: xhrAdapter,\n    fetch: fetchAdapter\n};\nutils$1.forEach(knownAdapters, (fn, value)=>{\n    if (fn) {\n        try {\n            Object.defineProperty(fn, \"name\", {\n                value\n            });\n        } catch (e) {\n        // eslint-disable-next-line no-empty\n        }\n        Object.defineProperty(fn, \"adapterName\", {\n            value\n        });\n    }\n});\nconst renderReason = (reason)=>`- ${reason}`;\nconst isResolvedHandle = (adapter)=>utils$1.isFunction(adapter) || adapter === null || adapter === false;\nconst adapters = {\n    getAdapter: (adapters)=>{\n        adapters = utils$1.isArray(adapters) ? adapters : [\n            adapters\n        ];\n        const { length } = adapters;\n        let nameOrAdapter;\n        let adapter;\n        const rejectedReasons = {};\n        for(let i = 0; i < length; i++){\n            nameOrAdapter = adapters[i];\n            let id;\n            adapter = nameOrAdapter;\n            if (!isResolvedHandle(nameOrAdapter)) {\n                adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n                if (adapter === undefined) {\n                    throw new AxiosError(`Unknown adapter '${id}'`);\n                }\n            }\n            if (adapter) {\n                break;\n            }\n            rejectedReasons[id || \"#\" + i] = adapter;\n        }\n        if (!adapter) {\n            const reasons = Object.entries(rejectedReasons).map(([id, state])=>`adapter ${id} ` + (state === false ? \"is not supported by the environment\" : \"is not available in the build\"));\n            let s = length ? reasons.length > 1 ? \"since :\\n\" + reasons.map(renderReason).join(\"\\n\") : \" \" + renderReason(reasons[0]) : \"as no adapter specified\";\n            throw new AxiosError(`There is no suitable adapter to dispatch the request ` + s, \"ERR_NOT_SUPPORT\");\n        }\n        return adapter;\n    },\n    adapters: knownAdapters\n};\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */ function throwIfCancellationRequested(config) {\n    if (config.cancelToken) {\n        config.cancelToken.throwIfRequested();\n    }\n    if (config.signal && config.signal.aborted) {\n        throw new CanceledError(null, config);\n    }\n}\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */ function dispatchRequest(config) {\n    throwIfCancellationRequested(config);\n    config.headers = AxiosHeaders$1.from(config.headers);\n    // Transform request data\n    config.data = transformData.call(config, config.transformRequest);\n    if ([\n        \"post\",\n        \"put\",\n        \"patch\"\n    ].indexOf(config.method) !== -1) {\n        config.headers.setContentType(\"application/x-www-form-urlencoded\", false);\n    }\n    const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);\n    return adapter(config).then(function onAdapterResolution(response) {\n        throwIfCancellationRequested(config);\n        // Transform response data\n        response.data = transformData.call(config, config.transformResponse, response);\n        response.headers = AxiosHeaders$1.from(response.headers);\n        return response;\n    }, function onAdapterRejection(reason) {\n        if (!isCancel(reason)) {\n            throwIfCancellationRequested(config);\n            // Transform response data\n            if (reason && reason.response) {\n                reason.response.data = transformData.call(config, config.transformResponse, reason.response);\n                reason.response.headers = AxiosHeaders$1.from(reason.response.headers);\n            }\n        }\n        return Promise.reject(reason);\n    });\n}\nconst validators$1 = {};\n// eslint-disable-next-line func-names\n[\n    \"object\",\n    \"boolean\",\n    \"number\",\n    \"function\",\n    \"string\",\n    \"symbol\"\n].forEach((type, i)=>{\n    validators$1[type] = function validator(thing) {\n        return typeof thing === type || \"a\" + (i < 1 ? \"n \" : \" \") + type;\n    };\n});\nconst deprecatedWarnings = {};\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */ validators$1.transitional = function transitional(validator, version, message) {\n    function formatMessage(opt, desc) {\n        return \"[Axios v\" + VERSION + \"] Transitional option '\" + opt + \"'\" + desc + (message ? \". \" + message : \"\");\n    }\n    // eslint-disable-next-line func-names\n    return (value, opt, opts)=>{\n        if (validator === false) {\n            throw new AxiosError(formatMessage(opt, \" has been removed\" + (version ? \" in \" + version : \"\")), AxiosError.ERR_DEPRECATED);\n        }\n        if (version && !deprecatedWarnings[opt]) {\n            deprecatedWarnings[opt] = true;\n            // eslint-disable-next-line no-console\n            console.warn(formatMessage(opt, \" has been deprecated since v\" + version + \" and will be removed in the near future\"));\n        }\n        return validator ? validator(value, opt, opts) : true;\n    };\n};\nvalidators$1.spelling = function spelling(correctSpelling) {\n    return (value, opt)=>{\n        // eslint-disable-next-line no-console\n        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);\n        return true;\n    };\n};\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */ function assertOptions(options, schema, allowUnknown) {\n    if (typeof options !== \"object\") {\n        throw new AxiosError(\"options must be an object\", AxiosError.ERR_BAD_OPTION_VALUE);\n    }\n    const keys = Object.keys(options);\n    let i = keys.length;\n    while(i-- > 0){\n        const opt = keys[i];\n        const validator = schema[opt];\n        if (validator) {\n            const value = options[opt];\n            const result = value === undefined || validator(value, opt, options);\n            if (result !== true) {\n                throw new AxiosError(\"option \" + opt + \" must be \" + result, AxiosError.ERR_BAD_OPTION_VALUE);\n            }\n            continue;\n        }\n        if (allowUnknown !== true) {\n            throw new AxiosError(\"Unknown option \" + opt, AxiosError.ERR_BAD_OPTION);\n        }\n    }\n}\nconst validator = {\n    assertOptions,\n    validators: validators$1\n};\nconst validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */ class Axios {\n    constructor(instanceConfig){\n        this.defaults = instanceConfig || {};\n        this.interceptors = {\n            request: new InterceptorManager$1(),\n            response: new InterceptorManager$1()\n        };\n    }\n    /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */ async request(configOrUrl, config) {\n        try {\n            return await this._request(configOrUrl, config);\n        } catch (err) {\n            if (err instanceof Error) {\n                let dummy = {};\n                Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();\n                // slice off the Error: ... line\n                const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, \"\") : \"\";\n                try {\n                    if (!err.stack) {\n                        err.stack = stack;\n                    // match without the 2 top stack lines\n                    } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, \"\"))) {\n                        err.stack += \"\\n\" + stack;\n                    }\n                } catch (e) {\n                // ignore the case where \"stack\" is an un-writable property\n                }\n            }\n            throw err;\n        }\n    }\n    _request(configOrUrl, config) {\n        /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API\n        if (typeof configOrUrl === \"string\") {\n            config = config || {};\n            config.url = configOrUrl;\n        } else {\n            config = configOrUrl || {};\n        }\n        config = mergeConfig(this.defaults, config);\n        const { transitional, paramsSerializer, headers } = config;\n        if (transitional !== undefined) {\n            validator.assertOptions(transitional, {\n                silentJSONParsing: validators.transitional(validators.boolean),\n                forcedJSONParsing: validators.transitional(validators.boolean),\n                clarifyTimeoutError: validators.transitional(validators.boolean)\n            }, false);\n        }\n        if (paramsSerializer != null) {\n            if (utils$1.isFunction(paramsSerializer)) {\n                config.paramsSerializer = {\n                    serialize: paramsSerializer\n                };\n            } else {\n                validator.assertOptions(paramsSerializer, {\n                    encode: validators.function,\n                    serialize: validators.function\n                }, true);\n            }\n        }\n        // Set config.allowAbsoluteUrls\n        if (config.allowAbsoluteUrls !== undefined) ;\n        else if (this.defaults.allowAbsoluteUrls !== undefined) {\n            config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;\n        } else {\n            config.allowAbsoluteUrls = true;\n        }\n        validator.assertOptions(config, {\n            baseUrl: validators.spelling(\"baseURL\"),\n            withXsrfToken: validators.spelling(\"withXSRFToken\")\n        }, true);\n        // Set config.method\n        config.method = (config.method || this.defaults.method || \"get\").toLowerCase();\n        // Flatten headers\n        let contextHeaders = headers && utils$1.merge(headers.common, headers[config.method]);\n        headers && utils$1.forEach([\n            \"delete\",\n            \"get\",\n            \"head\",\n            \"post\",\n            \"put\",\n            \"patch\",\n            \"common\"\n        ], (method)=>{\n            delete headers[method];\n        });\n        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);\n        // filter out skipped interceptors\n        const requestInterceptorChain = [];\n        let synchronousRequestInterceptors = true;\n        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n            if (typeof interceptor.runWhen === \"function\" && interceptor.runWhen(config) === false) {\n                return;\n            }\n            synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n            requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n        });\n        const responseInterceptorChain = [];\n        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n            responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n        });\n        let promise;\n        let i = 0;\n        let len;\n        if (!synchronousRequestInterceptors) {\n            const chain = [\n                dispatchRequest.bind(this),\n                undefined\n            ];\n            chain.unshift(...requestInterceptorChain);\n            chain.push(...responseInterceptorChain);\n            len = chain.length;\n            promise = Promise.resolve(config);\n            while(i < len){\n                promise = promise.then(chain[i++], chain[i++]);\n            }\n            return promise;\n        }\n        len = requestInterceptorChain.length;\n        let newConfig = config;\n        i = 0;\n        while(i < len){\n            const onFulfilled = requestInterceptorChain[i++];\n            const onRejected = requestInterceptorChain[i++];\n            try {\n                newConfig = onFulfilled(newConfig);\n            } catch (error) {\n                onRejected.call(this, error);\n                break;\n            }\n        }\n        try {\n            promise = dispatchRequest.call(this, newConfig);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n        i = 0;\n        len = responseInterceptorChain.length;\n        while(i < len){\n            promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n        }\n        return promise;\n    }\n    getUri(config) {\n        config = mergeConfig(this.defaults, config);\n        const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);\n        return buildURL(fullPath, config.params, config.paramsSerializer);\n    }\n}\n// Provide aliases for supported request methods\nutils$1.forEach([\n    \"delete\",\n    \"get\",\n    \"head\",\n    \"options\"\n], function forEachMethodNoData(method) {\n    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {\n        return this.request(mergeConfig(config || {}, {\n            method,\n            url,\n            data: (config || {}).data\n        }));\n    };\n});\nutils$1.forEach([\n    \"post\",\n    \"put\",\n    \"patch\"\n], function forEachMethodWithData(method) {\n    /*eslint func-names:0*/ function generateHTTPMethod(isForm) {\n        return function httpMethod(url, data, config) {\n            return this.request(mergeConfig(config || {}, {\n                method,\n                headers: isForm ? {\n                    \"Content-Type\": \"multipart/form-data\"\n                } : {},\n                url,\n                data\n            }));\n        };\n    }\n    Axios.prototype[method] = generateHTTPMethod();\n    Axios.prototype[method + \"Form\"] = generateHTTPMethod(true);\n});\nconst Axios$1 = Axios;\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */ class CancelToken {\n    constructor(executor){\n        if (typeof executor !== \"function\") {\n            throw new TypeError(\"executor must be a function.\");\n        }\n        let resolvePromise;\n        this.promise = new Promise(function promiseExecutor(resolve) {\n            resolvePromise = resolve;\n        });\n        const token = this;\n        // eslint-disable-next-line func-names\n        this.promise.then((cancel)=>{\n            if (!token._listeners) return;\n            let i = token._listeners.length;\n            while(i-- > 0){\n                token._listeners[i](cancel);\n            }\n            token._listeners = null;\n        });\n        // eslint-disable-next-line func-names\n        this.promise.then = (onfulfilled)=>{\n            let _resolve;\n            // eslint-disable-next-line func-names\n            const promise = new Promise((resolve)=>{\n                token.subscribe(resolve);\n                _resolve = resolve;\n            }).then(onfulfilled);\n            promise.cancel = function reject() {\n                token.unsubscribe(_resolve);\n            };\n            return promise;\n        };\n        executor(function cancel(message, config, request) {\n            if (token.reason) {\n                // Cancellation has already been requested\n                return;\n            }\n            token.reason = new CanceledError(message, config, request);\n            resolvePromise(token.reason);\n        });\n    }\n    /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */ throwIfRequested() {\n        if (this.reason) {\n            throw this.reason;\n        }\n    }\n    /**\n   * Subscribe to the cancel signal\n   */ subscribe(listener) {\n        if (this.reason) {\n            listener(this.reason);\n            return;\n        }\n        if (this._listeners) {\n            this._listeners.push(listener);\n        } else {\n            this._listeners = [\n                listener\n            ];\n        }\n    }\n    /**\n   * Unsubscribe from the cancel signal\n   */ unsubscribe(listener) {\n        if (!this._listeners) {\n            return;\n        }\n        const index = this._listeners.indexOf(listener);\n        if (index !== -1) {\n            this._listeners.splice(index, 1);\n        }\n    }\n    toAbortSignal() {\n        const controller = new AbortController();\n        const abort = (err)=>{\n            controller.abort(err);\n        };\n        this.subscribe(abort);\n        controller.signal.unsubscribe = ()=>this.unsubscribe(abort);\n        return controller.signal;\n    }\n    /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */ static source() {\n        let cancel;\n        const token = new CancelToken(function executor(c) {\n            cancel = c;\n        });\n        return {\n            token,\n            cancel\n        };\n    }\n}\nconst CancelToken$1 = CancelToken;\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */ function spread(callback) {\n    return function wrap(arr) {\n        return callback.apply(null, arr);\n    };\n}\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */ function isAxiosError(payload) {\n    return utils$1.isObject(payload) && payload.isAxiosError === true;\n}\nconst HttpStatusCode = {\n    Continue: 100,\n    SwitchingProtocols: 101,\n    Processing: 102,\n    EarlyHints: 103,\n    Ok: 200,\n    Created: 201,\n    Accepted: 202,\n    NonAuthoritativeInformation: 203,\n    NoContent: 204,\n    ResetContent: 205,\n    PartialContent: 206,\n    MultiStatus: 207,\n    AlreadyReported: 208,\n    ImUsed: 226,\n    MultipleChoices: 300,\n    MovedPermanently: 301,\n    Found: 302,\n    SeeOther: 303,\n    NotModified: 304,\n    UseProxy: 305,\n    Unused: 306,\n    TemporaryRedirect: 307,\n    PermanentRedirect: 308,\n    BadRequest: 400,\n    Unauthorized: 401,\n    PaymentRequired: 402,\n    Forbidden: 403,\n    NotFound: 404,\n    MethodNotAllowed: 405,\n    NotAcceptable: 406,\n    ProxyAuthenticationRequired: 407,\n    RequestTimeout: 408,\n    Conflict: 409,\n    Gone: 410,\n    LengthRequired: 411,\n    PreconditionFailed: 412,\n    PayloadTooLarge: 413,\n    UriTooLong: 414,\n    UnsupportedMediaType: 415,\n    RangeNotSatisfiable: 416,\n    ExpectationFailed: 417,\n    ImATeapot: 418,\n    MisdirectedRequest: 421,\n    UnprocessableEntity: 422,\n    Locked: 423,\n    FailedDependency: 424,\n    TooEarly: 425,\n    UpgradeRequired: 426,\n    PreconditionRequired: 428,\n    TooManyRequests: 429,\n    RequestHeaderFieldsTooLarge: 431,\n    UnavailableForLegalReasons: 451,\n    InternalServerError: 500,\n    NotImplemented: 501,\n    BadGateway: 502,\n    ServiceUnavailable: 503,\n    GatewayTimeout: 504,\n    HttpVersionNotSupported: 505,\n    VariantAlsoNegotiates: 506,\n    InsufficientStorage: 507,\n    LoopDetected: 508,\n    NotExtended: 510,\n    NetworkAuthenticationRequired: 511\n};\nObject.entries(HttpStatusCode).forEach(([key, value])=>{\n    HttpStatusCode[value] = key;\n});\nconst HttpStatusCode$1 = HttpStatusCode;\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */ function createInstance(defaultConfig) {\n    const context = new Axios$1(defaultConfig);\n    const instance = bind(Axios$1.prototype.request, context);\n    // Copy axios.prototype to instance\n    utils$1.extend(instance, Axios$1.prototype, context, {\n        allOwnKeys: true\n    });\n    // Copy context to instance\n    utils$1.extend(instance, context, null, {\n        allOwnKeys: true\n    });\n    // Factory for creating new instances\n    instance.create = function create(instanceConfig) {\n        return createInstance(mergeConfig(defaultConfig, instanceConfig));\n    };\n    return instance;\n}\n// Create the default instance to be exported\nconst axios = createInstance(defaults$1);\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios$1;\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken$1;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n// Expose all/spread\naxios.all = function all(promises) {\n    return Promise.all(promises);\n};\naxios.spread = spread;\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\naxios.AxiosHeaders = AxiosHeaders$1;\naxios.formToJSON = (thing)=>formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);\naxios.getAdapter = adapters.getAdapter;\naxios.HttpStatusCode = HttpStatusCode$1;\naxios.default = axios;\nmodule.exports = axios; //# sourceMappingURL=axios.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/axios/dist/node/axios.cjs\n");

/***/ })

};
;